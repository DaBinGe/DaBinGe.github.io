<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[大彬歌]]></title>
  <subtitle><![CDATA[做什么都一样，用心去做都可以做好。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-12-01T06:38:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[大彬歌]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[IOS开发2年半经验回顾]]></title>
    <link href="http://yoursite.com/2016/10/31/IOS%E5%BC%80%E5%8F%912%E5%B9%B4%E5%8D%8A%E7%BB%8F%E9%AA%8C%E5%9B%9E%E9%A1%BE/"/>
    <id>http://yoursite.com/2016/10/31/IOS开发2年半经验回顾/</id>
    <published>2016-10-31T09:37:42.000Z</published>
    <updated>2016-12-01T06:38:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>本文主要是为进阶新层次而总结开发30个月以来的学习成果。为尽可能多地覆盖广度和深度，分别从几个大方面描述相关内容。</p>
<h1 id="u8FC7_u7A0B_u6982_u8FF0"><a href="#u8FC7_u7A0B_u6982_u8FF0" class="headerlink" title="过程概述"></a>过程概述</h1><h2 id="objC"><a href="#objC" class="headerlink" title="objC"></a>objC</h2><p>iOS开发所用的语言Objective-C是新兴的一门开发语言，大学并没有开设相关课程。但是，oc是从c语言衍生过来了，有很多c语言的特征，也有高级语言和面向对象语言的特征，电子和计算机专业相关的人学起来都比较容易上手。</p>
<h2 id="u8BED_u6CD5_u5165_u95E8"><a href="#u8BED_u6CD5_u5165_u95E8" class="headerlink" title="语法入门"></a>语法入门</h2><p>小编是从0开始学iOS开发的，2014年4月13日开始写下第一行iOS开发的代码。那时还没毕业，就出来培训iOS开发，觉得系统地学下基础来入门会更好，避免留下坏的编程习惯。<br>语法学习。各门语言都一样，一开始必须学习语法知识，才能看得懂、写得出代码。oc的语法，主要是函数调用和消息机制和c语言有差别，数据处理方面基本没变。<br>编程最难最痛苦的莫过于处理数据了。学习的数据类型及其转换、赋值、对比判断，选择分支和循环等等，都是用来处理数据的。<br>函数的格式换了一种，让函数更长更易读。<br>使用开发工具的能力一直在提升，那时只会用Xcode，Mac OS的基本使用也摸索得差不多，安装和破解个软件没什么压力。</p>
<h2 id="UI_u5165_u95E8"><a href="#UI_u5165_u95E8" class="headerlink" title="UI入门"></a>UI入门</h2><p>纯代码写各种UIView及其子类控件。一开始觉得难度大，但是写到后面发现很多共性，学会看接口和文档后，写新控件已经没什么压力。学UI的时候还学了手势和响应者链，了解苹果手机的一些系统实现机制。<br>学习了基础就是项目期，开始做项目。那时觉得学了很多技术了，做项目才知道很多知识用不到，该会的却没学。然后就是通过网上大量的技术博客恶补了。</p>
<h2 id="u7B2C_u4E00_u4EFD_u5DE5_u4F5C"><a href="#u7B2C_u4E00_u4EFD_u5DE5_u4F5C" class="headerlink" title="第一份工作"></a>第一份工作</h2><p>做完项目就去找工作了，也许是小编基础比较扎实，技术总结归纳得好，一找就得到了工作。而且更幸运的是，我所做的项—-<strong>追追</strong>，是个完整的大项目，有大神之前已经写好很多代码了。<br>曾经我怀疑过他们的一些设计方式，也否定了部分代码细节，但是后来技术提升了才发现他们是对的，相关开发书籍就说了具体的利与弊。<br>开发追追的那段时间，我学会了很多技术，主要是UI开发和框架设计，即时聊天和发布APP还没着手。也是那时候开始学会封装接口，处理复杂的业务逻辑的。很怀念，因为只有那个时候老主管带过我，愿意教我技术。</p>
<h2 id="u7B2C_u4E8C_u4EFD_u5DE5_u4F5C"><a href="#u7B2C_u4E8C_u4EFD_u5DE5_u4F5C" class="headerlink" title="第二份工作"></a>第二份工作</h2><p>这份工作到现在已经有19个月了。由于产品的更改频繁，总监要求高，在这个创业公司里，小编的实力突飞猛进，在此工作1年就感觉技术到达了瓶顶。一天天的加班，一版版的迭代，一次次的优化，小编在开发的<strong>哒哒运动</strong>项目里实现了各种炫丽的UI效果，处理过量大而结构复杂的数据。<br>最难的要数跑步画轨迹的功能了，逻辑多，计算麻烦，而且还要室外调试各种情况。LBS的功能很多都用得滚瓜烂熟了，包括地位、搜索和导航3大地图模块。<br>由于2.0版本前都是我主导整个项目，所以学习了全面的开发技术。以前没接触过的TestFlight测试、证书管理、线上崩溃追踪和性能调试等等都得到了很好的突破。小编是个好学的人，期间看了很多iOS开发书籍，印证了第一个项目的多处优秀代码。<br>由于公司业务的改变，所做的功能已经对技术提高不大，近半年来主要学习HTML开发。公司业务量并不大，小编同时开发H5和iOS都还比较轻松。那么接下来说说我在这次工作都实现了哪些功能吧。    </p>
<ul>
<li>搭建框架、优化框架，目录结构、工程设置、封装接口、封装基类等</li>
<li>编写开发计划文档、项目文档、SVN使用文档等</li>
<li>图片相关处理，获取、编辑、多图上传、加载、轮播、放大、裁剪、玻化滤镜、截屏、拼图等</li>
<li>各种各样的列表，瀑布流、用户图文动态、单级评论、盖楼评论、好友通讯录、类彩票中奖等</li>
<li>自定义各种弹窗，类系统警告框、actionSheet、加载动画等</li>
<li>地图功能，定位、经纬度编解码、POI搜索、导航、多样化标注、自定义覆盖物、实时天气等</li>
<li>手机系统功能，相册相机、麦克风、定位、通讯录、短信、健康数据、陀悬仪、通知、打电话、日历等</li>
<li>用户编辑、发布功能，图文动态发布、资料修改、创建类似活动的发布</li>
<li>即时聊天，长连接、XML CoreData 自定义类型 基本数据类型的数据转换、数据增删改查、消息中心、聊天键盘、聊天界面分页加载复制删除等功能</li>
<li>发布app，开发者账户管理、开发和发布证书及配置文件的管理、真机测试设备管理、app发布信息编辑、上传及TestFlight测试、处理各种提审及复审问题等</li>
<li>第三方SDK，AFNetworking SDWebImage MWPhotoBrowser AGImagePickerController JSONKit XMPPFramework MJRefresh FMDB MBProgressHUD OpenShare等</li>
<li>第三方开放平台，腾讯（登录分享）、微信（登录分享支付）、支付宝、新浪微博（登录分享）、友盟（统计、客服留言板）、个推、高德地图、“科大讯飞、环信（差点引入）”</li>
<li>性能，后台模式（定位、语音）、数据库快速写入、多个异步线程网络请求、UI渲染、内存泄漏优化等</li>
<li>音视频，录制、本地及网络播放、上传、下载、视频转码、视频缩略图等</li>
<li>数据库，CoreData、FMDB    </li>
</ul>
<p>阅读了千千万万的文档之后，做好以上功能已经没有压力了。但是由于APP的用户量不高，更精细的功能还有待进一步提高。</p>
<h1 id="u5404_u6A21_u5757_u6280_u672F"><a href="#u5404_u6A21_u5757_u6280_u672F" class="headerlink" title="各模块技术"></a>各模块技术</h1><h2 id="u8BED_u6CD5_u57FA_u7840"><a href="#u8BED_u6CD5_u57FA_u7840" class="headerlink" title="语法基础"></a>语法基础</h2><p>主要学习了基本数据类型和id数据类型的基本用法和函数、类的语法等，包括运算、对比、转换和一些逻辑处理等，多是用于业务数据处理方面，属于很形象的一个就是MVC的model。这一块没有界面效果，都是在控制台进行的。</p>
<h2 id="UI_u57FA_u7840"><a href="#UI_u57FA_u7840" class="headerlink" title="UI基础"></a>UI基础</h2><p>学习了UIView及其子类的用法，手势交互及手机系统响应者链、APP结构等。几乎每一句都有相应的效果对应，学起来没那么抽象，也快很多。这部分就属于MVC的view和controller了。</p>
<h2 id="u5E94_u7528_u5F00_u53D1"><a href="#u5E94_u7528_u5F00_u53D1" class="headerlink" title="应用开发"></a>应用开发</h2><p>主要学习手机系统和app工作原理，应用组成，各界面切换等。涉及应用层的显示、交互、网络和更新等。这个模块和UI基础类似，却更深入学习了APP的架构和原理。</p>
<h2 id="u5C0F_u6570_u636E_u5B58_u50A8"><a href="#u5C0F_u6570_u636E_u5B58_u50A8" class="headerlink" title="小数据存储"></a>小数据存储</h2><p>有归解档 archive、属性列表 plist、用户默认设置 NSUserDefault、文件管理 NSFileManager等。<br>它们的读写的接口都比较简单，按需选择来用就可以。</p>
<h2 id="u5927_u6570_u636E_u5B58_u50A8"><a href="#u5927_u6570_u636E_u5B58_u50A8" class="headerlink" title="大数据存储"></a>大数据存储</h2><p>主要是数据库，包括原生sqlite，FMDB，CoreData,Realm等。<br>sqlite还是比较麻烦的，难度也大，毕竟是c代码的操作；CoreData有图形设置界面，接口也不多，即使是XMPP里的CoreData也是，但是难度也大；FMDB和Realm都是sqlite封装出来的，虽然用着会方便些，但是升级问题、安全问题还是得考虑进去，看着文档写很快就会了。<br>然后就是数据库的通用难点了。表的改变、关联，数据迁移升级等。</p>
<h2 id="u6570_u636E_u5904_u7406"><a href="#u6570_u636E_u5904_u7406" class="headerlink" title="数据处理"></a>数据处理</h2><p>主要是数据解析、组装及各种类型间的转换。<br>解析包括XML、JSON、Node节点、多层嵌套结果获取等。组装有集合和字符串处理等。转换一般是字典模型转换、基本数据类型、id类型、CF框架类型、xml、node节点、Coredata类型和自定义id类型等相互间的转换。</p>
<h2 id="u7F51_u7EDC"><a href="#u7F51_u7EDC" class="headerlink" title="网络"></a>网络</h2><p>处理封装接口就是实现加载动画和回调提示了。基本是都是使用AFNetworking的接口，再封装一层接口来用，主要是短连接的Post请求和多文件上传。即使是断点续传，也都被封装好了的。当然，它的实现原理还是知道的。简单地说就是，开个异步线程，创建一个请求，把组装好参数和地址，发起请求，等待并处理结果返回就可以。</p>
<h2 id="u591A_u5A92_u4F53"><a href="#u591A_u5A92_u4F53" class="headerlink" title="多媒体"></a>多媒体</h2><h3 id="u56FE_u7247"><a href="#u56FE_u7247" class="headerlink" title="图片"></a>图片</h3><p>从上传到浏览的处理：获取（单选多选相册、拍照）、多图上传、小图浏览及加载指示、大图放大。下载显示包含异步下载和文件处理等，这些已被SDWebImage集成好。<br>其他处理包括截图、裁剪、玻化、水印、压缩等。</p>
<h3 id="u97F3_u9891"><a href="#u97F3_u9891" class="headerlink" title="音频"></a>音频</h3><p>录音、时长、本地网络播放、上传、下载、权限、后台模式、音频冲突等。本地播放还分文件播放和文字播放的。如果感觉系统的语音不好听，可以引入科大讯飞语音。</p>
<h3 id="u89C6_u9891"><a href="#u89C6_u9891" class="headerlink" title="视频"></a>视频</h3><p>视频比音频文件大，多了图像流，所以上传、下载需要压缩、分段或者续传之类的，格式上要和安卓兼容，还要视频转码，视频缩略图有接口直接可以获取到。其他很多和音频类似。</p>
<h2 id="u6027_u80FD_u4F18_u5316"><a href="#u6027_u80FD_u4F18_u5316" class="headerlink" title="性能优化"></a>性能优化</h2><p>这个模块要求有很好的技术，而且贯穿这个开发生涯。<br>小到编码规范，大到精妙算法，很多都和性能有关。网上已有不少博客描述了性能优化的例子，读者请自行查看，下面说说小编性能优化经历：</p>
<h3 id="u5185_u5B58_u7BA1_u7406"><a href="#u5185_u5B58_u7BA1_u7406" class="headerlink" title="内存管理"></a>内存管理</h3><p>MRC的内存管理在此就不多说了，下面列出几个ARC下的内存管理：    </p>
<ul>
<li>c或者底层C写的框架,CoreFoundation,CoreGraphics等,所生成的对象</li>
<li>循环引用，对象件引用，代码块相关引用</li>
<li>循环生成多个对象时，用autoreleasepool及时释放内存</li>
<li>相册、图片处理，读写时防止出现内存峰值</li>
<li>@property相关的设定</li>
<li>dealloc释放相关(释放引用或者定时器、移除侦听)    </li>
</ul>
<h3 id="UI_u6E32_u67D3"><a href="#UI_u6E32_u67D3" class="headerlink" title="UI渲染"></a>UI渲染</h3><p>主要是控制圆角、边框、透明度和控件重叠等。显然，频繁重绘肯定影响性能了，比如地图功能里不断移除和添加标注或覆盖物。    </p>
<h3 id="u964D_u4F4ECPU_u6D88_u8017"><a href="#u964D_u4F4ECPU_u6D88_u8017" class="headerlink" title="降低CPU消耗"></a>降低CPU消耗</h3><p>在cell重用的时候，尽量不重复生成对象，尤其是NSDateFormatter和NSNumberFormatter。异步加载图片的时候，多个线程也会加大CPU负担。</p>
<h3 id="u4EE3_u7801_u91CD_u6784"><a href="#u4EE3_u7801_u91CD_u6784" class="headerlink" title="代码重构"></a>代码重构</h3><p>经常因为赶工期，前面往往是实现了功能，后来有时间才会重构代码，优化一些算法的实现，这部分优化性能的多是处理循环相关的操作。</p>
<h2 id="u9879_u76EE_u7BA1_u7406"><a href="#u9879_u76EE_u7BA1_u7406" class="headerlink" title="项目管理"></a>项目管理</h2><h3 id="u5DE5_u7A0B_u8BBE_u7F6E"><a href="#u5DE5_u7A0B_u8BBE_u7F6E" class="headerlink" title="工程设置"></a>工程设置</h3><p>工程设置内容比较多，经常要改的就是版本号、描述文件和证书了。有时还会因为需求而改变后台模式等功能性设置，其他更改往往得根据编译报错来进行。</p>
<h3 id="u6587_u4EF6_u7BA1_u7406"><a href="#u6587_u4EF6_u7BA1_u7406" class="headerlink" title="文件管理"></a>文件管理</h3><p>这块主要是管理工程目录结构。文件归类前，创建的是实际文件夹，加入工程的时候使用参考文件夹，这样可以避免工程错误导致的文件错乱。目录分类规则一般按功能分类，把大模块需求一级级细分。更新较多的是Resources的Images、新需求模块的创建。</p>
<h3 id="u7248_u672C_u7BA1_u7406"><a href="#u7248_u672C_u7BA1_u7406" class="headerlink" title="版本管理"></a>版本管理</h3><p>可以使用SVN、github、git等管理项目版本，git可以是公司的git服务器，也可以用Xcode自带的git工具。它们各有长短，使用的套路基本类似，了解下它们的原理，用哪个都顺手。</p>
<h2 id="u67B6_u6784_u8BBE_u8BA1"><a href="#u67B6_u6784_u8BBE_u8BA1" class="headerlink" title="架构设计"></a>架构设计</h2><p>架构设计考虑最多的就是重用性、维护性和扩展性了。架构开发者把各个模块分类，封装好，其他开发人员直接调用、在相应模块编辑就可以。好的框架往往可以看到很明显的<a href="http://blog.jobbole.com/65762/" target="_blank" rel="external">Designated和Secondary</a>接口。小编搭建项目架构的时候，主要做了一下几方面工作：    </p>
<ul>
<li>编写预编译头文件</li>
<li>加入通用宏定义、类型常量</li>
<li>引入需要用到的第三方，包括CocoaPods及非CocoaPods的第三方</li>
<li>引入项目通用接口</li>
<li>创建MVC基类<ol>
<li>model基类主要实现runtime模型字典转换，runtime归解档</li>
<li>各种UIView及其子类的封装</li>
<li>VC设置返回手势、导航栏、网络加载动画等</li>
</ol>
</li>
<li>编写网络接口及处理层级数据结构的接口</li>
<li>编写全局工具类、字符串、加密、推送和系统功能工具类等    </li>
</ul>
<p>其他内容根据需求进行增加或者修改。</p>
<h2 id="u4EE3_u7801_u8C03_u8BD5"><a href="#u4EE3_u7801_u8C03_u8BD5" class="headerlink" title="代码调试"></a>代码调试</h2><h1 id="u5404_u9879_u76EE_u56DE_u987E"><a href="#u5404_u9879_u76EE_u56DE_u987E" class="headerlink" title="各项目回顾"></a>各项目回顾</h1><h1 id="u4F18_u79C0_u7B2C_u4E09_u65B9SDK_u539F_u7406_u63A2_u7A76"><a href="#u4F18_u79C0_u7B2C_u4E09_u65B9SDK_u539F_u7406_u63A2_u7A76" class="headerlink" title="优秀第三方SDK原理探究"></a>优秀第三方SDK原理探究</h1><h1 id="u9AD8_u7EA7_u5F00_u53D1"><a href="#u9AD8_u7EA7_u5F00_u53D1" class="headerlink" title="高级开发"></a>高级开发</h1><h1 id="u6280_u672F_u74F6_u9876_u9650_u5236"><a href="#u6280_u672F_u74F6_u9876_u9650_u5236" class="headerlink" title="技术瓶顶限制"></a>技术瓶顶限制</h1><h1 id="u5BF9iOS_u5F00_u53D1_u7684_u770B_u6CD5"><a href="#u5BF9iOS_u5F00_u53D1_u7684_u770B_u6CD5" class="headerlink" title="对iOS开发的看法"></a>对iOS开发的看法</h1><h1 id="u5BF9_u8F6F_u4EF6_u5F00_u53D1_u5DE5_u7A0B_u5E08_u7684_u7406_u89E3"><a href="#u5BF9_u8F6F_u4EF6_u5F00_u53D1_u5DE5_u7A0B_u5E08_u7684_u7406_u89E3" class="headerlink" title="对软件开发工程师的理解"></a>对软件开发工程师的理解</h1><h1 id="u7F16_u7A0B_u601D_u60F3"><a href="#u7F16_u7A0B_u601D_u60F3" class="headerlink" title="编程思想"></a>编程思想</h1><h1 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>本文主要是为进阶新层次而总结开发30个月以来的学习成果。为尽可能多地覆盖广度和深度，分别从几个大方面描述]]>
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[H5入门之路]]></title>
    <link href="http://yoursite.com/2016/10/17/H5%E5%85%A5%E9%97%A8%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2016/10/17/H5入门之路/</id>
    <published>2016-10-17T04:00:46.000Z</published>
    <updated>2016-10-26T09:30:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u6982_u8981"><a href="#u6982_u8981" class="headerlink" title="概要"></a>概要</h1><p>本文主要总结小编4个月以来入门学习HTML开发的过程总结和心得体会，希望对想入行的小伙伴们有少少帮助。部分体会带有较重的个人感情色彩，毕竟是写主观内容，望读者平视之。<br><br></p>
<h1 id="u4ECE_u5F00_u59CB_u5B66_u4E60_u5230_u53D1_u5E03_u7B2C_u4E00_u4E2AH5_u9879_u76EE"><a href="#u4ECE_u5F00_u59CB_u5B66_u4E60_u5230_u53D1_u5E03_u7B2C_u4E00_u4E2AH5_u9879_u76EE" class="headerlink" title="从开始学习到发布第一个H5项目"></a>从开始学习到发布第一个H5项目</h1><p>小编入行iOS开发2年有余，整个过程下来，对学习软件编程的套路有了深刻的理解和感受，为验证这一学习方法的可行性，小编决定拿一门开发语言来实践检验。鉴于行情里h5正是开始发热阶段，开发难度低些，所以就选它了，即使对前端开发者来说，学了后端开发会更完美。<br>H5主要指移动端的网页开发，和web前端还是有些区别的，但是开发中也适配PC(个人电脑person computer)端</p>
<h2 id="u5F00_u5199_u524D_u8C03_u7814"><a href="#u5F00_u5199_u524D_u8C03_u7814" class="headerlink" title="开写前调研"></a>开写前调研</h2><p>每次做重大决定前，都会对所选方向的可能困难、麻烦进行评估，并大概想想如何处理相关困难，这样能更好做到持久作战，不容易放弃。<br>所以我先对HTML5各方面作个了解，比如原始定义、行情、技术难度、市场动态、最麻烦或者最难点、要学什么、学习资源等。并把重要信息记录下来，一开始就记录到一个归类里，后面再添加和修改。<br>能搜索到这篇博客，说明你已经有这个意识了。</p>
<h2 id="u83B7_u53D6_u5B66_u4E60_u8D44_u6E90"><a href="#u83B7_u53D6_u5B66_u4E60_u8D44_u6E90" class="headerlink" title="获取学习资源"></a>获取学习资源</h2><p>从获取学习资源开始，你就正式开始进入学习阶段了。这个阶段，你应该搜索到很多提高路径和学习资源了。<br>首先肯定是HTML、CSS、JavaScript语法学习。<a href="https://www.w3.org" target="_blank" rel="external">W3C标准</a>、<a href="https://www.w3.org/html/ig/zh/wiki/HTML5" target="_blank" rel="external">H5中国</a>、<a href="http://html5index.org" target="_blank" rel="external">H5 JS API</a>、<a href="http://www.runoob.com" target="_blank" rel="external">菜鸟教程</a>等。<br>想要系统地学习相关知识，通过书籍是很好的方法。<a href="https://detail.tmall.com/item.htm?id=44122968788&amp;ut_sk=1.VSfRdD28yQcDAM543N1LbAic_21380790_1476693328853.Copy.1&amp;sourceType=item&amp;price=54.4&amp;suid=D63FAB89-1AC5-4E98-A7E6-4C39B85E9DB9&amp;un=57a2d48487b3e317132b0f6991806569&amp;share_crt_v=1&amp;cpp=1&amp;shareurl=true&amp;spm=a313p.22.22t.13228862898&amp;short_name=h.bX11vn&amp;cv=AAOuvfKh&amp;sm=6a4707&amp;app=firefox" target="_blank" rel="external">HTML5+CSS3+JavaScript网页设计案例课堂</a>、<a href="https://detail.tmall.com/item.htm?id=25395312752&amp;ut_sk=1.VSfRdD28yQcDAM543N1LbAic_21380790_1476693328853.Copy.1&amp;sourceType=item&amp;price=26&amp;origin_price=33.7&amp;suid=32CDC0FF-5A30-4124-9EA3-DEF4867C36EE&amp;un=57a2d48487b3e317132b0f6991806569&amp;share_crt_v=1&amp;cpp=1&amp;shareurl=true&amp;spm=a313p.22.1dk.13229381646&amp;short_name=h.bX1nf1&amp;cv=AAOuzDGm&amp;sm=31a3cd&amp;app=firefox" target="_blank" rel="external">HTML5移动Web开发实战</a>、<a href="https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.11.gwHB6H&amp;id=527669964743&amp;areaId=440100&amp;user_id=2072556143&amp;cat_id=2&amp;is_b=1&amp;rn=5ce63008bb12620b52e1c39f462327fa" target="_blank" rel="external">JavaScript高级程序设计</a>。<br>观看教学视频能快速学习新技术。它不像看书需要良好的状态，也不像技术文档那么多文字图片，通过讲师的语言就能很快很明白的让你批量学到技术点。即使毫无基础，第一次看视频收获也很大。<br>小编首先过了一遍HTML，CSS，JavaScript的基础视频。后面快要做项目了，才看项目实战视频。在视频里有很多技术和开发技巧是其他资源学不到的。</p>
<h2 id="u5F00_u59CB_u5199_u4EE3_u7801"><a href="#u5F00_u59CB_u5199_u4EE3_u7801" class="headerlink" title="开始写代码"></a>开始写代码</h2><p>主动敲代码是最关键的一步。只有真正去调试代码，才能理解和记忆各个代码的效果、细节和区别。</p>
<h3 id="u5B89_u88C5IDE"><a href="#u5B89_u88C5IDE" class="headerlink" title="安装IDE"></a>安装IDE</h3><p>工具的重要性就不多说了，没有哪个正常人会徒手砍大树，所以会安装、使用和设置IDE（集成开发环境，Integrated Development Environment）是程序员的必备技能之一。以下介绍几个主流HTML编辑器：<br><a href="http://www.sublimetext.com" target="_blank" rel="external">Sublime Text</a><br><a href="http://www.adobe.com/cn/products/cs6/dreamweaver.html" target="_blank" rel="external">Dreamwave</a><br><a href="http://www.jetbrains.com/webstorm" target="_blank" rel="external">Webstorm</a><br>当然，意识好的话，你也许会先去百度百科之类的网页了解它们，或者搜索“<a href="https://www.baidu.com/s?wd=%E5%A5%BD%E7%94%A8%E7%9A%84HTML%E7%BC%96%E8%BE%91%E5%99%A8&amp;rsv_spt=1&amp;rsv_iqid=0xf77e3db3000014ef&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;inputT=526&amp;rsv_t=bccbhnlNodVuWtPtPe9SBKst6HUQLs4DIEV68B2m22nL4j1ZR%2FDgZFAPgBRGuj1Hi4OV&amp;oq=windows%E7%B3%BB%E7%BB%9Fbaike&amp;rsv_pq=8f2f4ac70001879f&amp;rsv_sug3=34&amp;rsv_sug1=20&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_sug4=1362&amp;rsv_sug=1" target="_blank" rel="external">好用的HTML编辑器</a>”，查阅了足够资料再下手。<br>破解相关的就不再多说了，<a href="http://baike.baidu.com/view/46646.htm?fromtitle=windows&amp;fromid=165458&amp;type=search" target="_blank" rel="external">Windows</a>和<a href="http://baike.baidu.com/view/157344.htm" target="_blank" rel="external">Mac OS</a>都已有教程，按照文档说明操作就可以。开发之路很多实现都要根据文档来解决的，这是迟早要精通的技能。</p>
<h3 id="u6309_u7167_u4E66_u672C_u6572_u4EE3_u7801"><a href="#u6309_u7167_u4E66_u672C_u6572_u4EE3_u7801" class="headerlink" title="按照书本敲代码"></a>按照书本敲代码</h3><p>书本会从基础慢慢介绍各种标签，按照上面的内容调试出基本的效果。当然，书上的内容那么少，不可能局限于里面的知识，书，应该被当成为引导。<br>所以，你得要各个细节都自己查阅资料，详细学习那些知识点。<br>一开始，遇到doctype,html,head,body等，都去百度或者谷歌搜索相关的技术博客，遇到什么其他新内容也去调研。这样的话，往往查一个小知识却会花费很多时间，阅读大量的文档。这个过程的沉淀是非常重要的，你不但可以详细了解这个模块的技术，还能学到相关的其他要点。<br>像常见属性值的各种效果，很多技术博客都是图文说明，看了之后方便理解和记忆，自己调试也很快得到效果。<br>整个过程就是学习HTML标签的设置，CSS的布局控制和JavaScript的交互和数据处理。</p>
<h3 id="u7F16_u7801_u89C4_u8303"><a href="#u7F16_u7801_u89C4_u8303" class="headerlink" title="编码规范"></a>编码规范</h3><p>不管哪门开发语言，都有编码规范。所以养成良好的习惯是必要的，特别是开始的时候就注意着方面，否则以后要改掉坏习惯就难多了。<br>开始写的时候，你就应该经常去查看相关的<a href="http://codeguide.bootcss.com" target="_blank" rel="external">编码规范</a>。说是相关的，因为HTML，CSS和JavaScript的编码规范是不一样的。即使发布前要<a href="https://github.com/mishoo/UglifyJS" target="_blank" rel="external">压缩代码</a>，但是压缩前的代码还是要根据规范来写，免得坑了日后的自己或者别人。</p>
<h3 id="u8C03_u8BD5_u4EE3_u7801"><a href="#u8C03_u8BD5_u4EE3_u7801" class="headerlink" title="调试代码"></a>调试代码</h3><p>写代码的过程也会包含调试代码的操作，小模块很快写完来调试，但是内容多的时候，往往是写一个效果或者改动一处代码会马上查看结果，特别是要适配那么多的浏览器、版本和设备尺寸。    </p>
<h4 id="PC_u7AEF"><a href="#PC_u7AEF" class="headerlink" title="PC端"></a>PC端</h4><p>直接用浏览器打开html文件或者保存代码后刷新已打开的html网页。</p>
<h4 id="u79FB_u52A8_u7AEF"><a href="#u79FB_u52A8_u7AEF" class="headerlink" title="移动端"></a>移动端</h4><p>调试移动端的网页，分为模拟器调试和真机调试。     </p>
<h5 id="u6A21_u62DF_u5668"><a href="#u6A21_u62DF_u5668" class="headerlink" title="模拟器"></a>模拟器</h5><p>模拟器调试途径比较多，小编在这里大概罗列一下：各浏览器查看元素里选移动设备、安卓模拟器、iOS模拟器等。小编觉得用模拟器软件的时候电脑太卡了，所以选择浏览器带的模拟器，谷歌浏览器的模拟器设计得比较方便操作，界面好，所以小编主要用它调试。打开方法：右键网页-&gt;检查-&gt;Toggle device mode。<br>断点调试JavaScript代码：浏览器窗口拉开足够宽（一般的电脑最大化就可以），找到Toggel device mode右边的第三个Sources，选择左边第一个小窗口的一个网页文件，中间是代码窗口，再过来就是debugger窗口。代码窗口里，左边一列是行数，点击那些数字会添加或者取消断点。    </p>
<h5 id="u771F_u673A_u8C03_u8BD5"><a href="#u771F_u673A_u8C03_u8BD5" class="headerlink" title="真机调试"></a>真机调试</h5><p>windows可以通过设置iis实现局域网真机调试，而小编用的是Mac OS，故选择的是<a href="http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html" target="_blank" rel="external">weinre</a>工具。官网里有安装和运行流程，但是有个细节没有说明，导致小编研究了很久才使用成功，下面将补上这个细节：<br>运行weinre服务之前，应该把源码放到/usr/local/lib/node_modules/weinre/web下，然后再运行weinre服务，如$ weinre –boundHost 192.168.1.123 –httpPort 8888。手机浏览器打开<a href="http://192.168.1.123:8888/fileName.html" target="_blank" rel="external">http://192.168.1.123:8888/fileName.html</a> ，fileName就是你要运行看效果的html源码文件。有文件夹的话，按web目录下拼接后面部分即可，如：<a href="http://192.168.1.123:8888/projects/helloworld/helloworld.html" target="_blank" rel="external">http://192.168.1.123:8888/projects/helloworld/helloworld.html</a> 。如想在其他app内看效果，粘贴这个链接并打开即可。</p>
<h3 id="u770B_u6559_u5B66_u89C6_u9891"><a href="#u770B_u6559_u5B66_u89C6_u9891" class="headerlink" title="看教学视频"></a>看教学视频</h3><p>学完了基础，再看教学视频可以快很多，小编往往是2倍速度的播放。这个时候查漏补缺效率比较高，要是看视频而不是看书的话，经常要后退播放，或者直接看源码，而且看书要很集中注意力进行知识理解和内容关联，不适合快速阅读，所以小编选择快速看视频，读者可根据个人情况作选择。<br>由于看视频是短时间内灌输大量内容，过后很容易忘记，所以实践是很必要的。学基础技术的时候看基础视频，项目前后看项目视频效果更佳。<br>至于视频的下载资源这里就不多说了，网上很多平台有提供下载，网购也是几块钱到几十块。搜索资源是新手必练技能，自己搞定更好。</p>
<h2 id="u5F00_u53D1_u9879_u76EE"><a href="#u5F00_u53D1_u9879_u76EE" class="headerlink" title="开发项目"></a>开发项目</h2><p>如果按比例来算的话，之前的学习只占1/4。不做项目，之前学习的所有技术价值都将大打折扣。只有做了项目，才可以说你掌握和能应用那块知识点。<br>因为之前学的知识很散很基础，而产品需求往往是某方面要求做得很精细的，这样做项目的时候便会深入学习那个方向并调试各种效果再选一种方案。<br>下面是开发项目的过程：<br>小编的第一个项目的功能很简单，只是显示几张图片和几段文字的分享界面。能做得多好就看对自己的要求了。比如要适配哪些设备，哪些浏览器及其版本，横竖屏，是否引入第三方SDK(Software Development Kit，软件开发工具包)、引入前端框架、压缩代码、使用严格模式等等。<br>适配、手势处理、性能优化是H5开发很重要的几个工作，所以小编一入门就开始着手这几个方面。性能优化是贯穿这个开发生涯的，技术沉淀也好，做的越好，入门期能做些简单的优化已经可以了，高级的优化之后慢慢深入调试与学习。并且这个是界面，所以这次主要工作量放在适配方面。<br>小编适配了iPhone,Androd,iPod的横竖屏，PC端限制了最大宽度。<br>图片处理是每个开发语言都要花费比较多精力的内容。这次只是简单的显示本地或者线上图片，测试版显示本地图片，发布版显示线上图片。小编的项目发布是给服务端人员把html文件转换成jsp文件发布的，图片可以上次到第三方平台得到链接直接使用，也可以给服务端人员上传到公司服务器，地址服务端人员要修改。<br>真机调试，发布之后发现有些UI效果在手机和模拟器有出入，或者在微信，QQ，UC浏览器显示不佳，这时候，给个代码又不确定在手机能不能显示合意，总不能改一个小效果就让服务端人员发布一次，这样行不通的，觉得肯定已经有解决方案。然后小编着手真机调试，调试好了再给服务端人员发布。Mac OS下不能像Windows用iis，调查后选了weinre，不难，纯终端操作。<br>做完了记得来个项目总结，不然别人问你在这个项目做了什么你都答不上来。<br>可见，项目实战能学很多技术的。新手会遇到各种问题，不要浮躁，大家都是这样过来的，沉着冷静去寻找解决方案就可以，现在技术那么成熟，你遇到的这些小问题早被别人搞定了，你学会了就是问题终结者。</p>
<h3 id="u770B_u73B0_u6210_u6E90_u7801"><a href="#u770B_u73B0_u6210_u6E90_u7801" class="headerlink" title="看现成源码"></a>看现成源码</h3><p>有很多功能别人已经写好了的，随便打开个网站看其源码就是个好方法，也不用到github是搜。当然，也有些源码被压缩了不方便看，其它很多还是能看到的。项目期遇到的问题，看大型网站的解决方案就是个不错的选择。是不是有种感觉：资源多到都不想看了。</p>
<h2 id="u5584_u4E8E_u603B_u7ED3"><a href="#u5584_u4E8E_u603B_u7ED3" class="headerlink" title="善于总结"></a>善于总结</h2><p>接下来说说真正的努力。<br>总结是贯穿在整个过程中的，每学一个模块或者学习一段时间，比如10分钟，都应该总结之前的内容，提炼出关键内容。<br>主动地问自己，刚刚学了什么？这些内容讲解了什么？属于哪个模块？包含哪些部分？各部分下又是什么内容？有什么用？怎么用？等等。<br>这样的总结够多之后，你将对整个开发有个明了的框架，更能理解深刻，记得久。完成一个项目，看完一本书，你都能轻松描述它们的精髓、重点、难点和注意内容。<br>这个总结是过程很烧脑，不仅要高度集中注意力，还要持续联想和回忆，真是个痛苦的经历，简直和小编练习CET-4作文的过程有的一拼。所以很多人不愿意进行这个过程，但是很勤奋花费很多时间，结果到达的极限却总和别人不止一个等级。<br>就拿解数学题来说吧，那些只看大题答案却从来不愿意动手从头写哪怕一次的同学，到考试的时候，往往写3，4步就要卡住了。经常主动动手解题的同学，看了题目，已经差不多看到最后结果了。看再多的答案，不动手写过程，这种勤奋太表面了。    </p>
<h1 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h1><p>入门最深刻的印象就是查阅了千千万万的技术博客，看了很多天的技术文档，尤其是那些英文文档，遇到个新东西就查，想到什么相关的就查。然后就是连续地敲代码，写了大量的demo，测试一些小功能。习惯写demo的好处就不多说了，以后你就会懂了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u6982_u8981"><a href="#u6982_u8981" class="headerlink" title="概要"></a>概要</h1><p>本文主要总结小编4个月以来入门学习HTML开发的过程总结和心得体会，希望对想入行的小伙伴们有少少帮助。部]]>
    </summary>
    
      <category term="HTML开发" scheme="http://yoursite.com/tags/HTML%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/10/17/hello-world/"/>
    <id>http://yoursite.com/2016/10/17/hello-world/</id>
    <published>2016-10-17T03:55:44.000Z</published>
    <updated>2016-02-25T10:13:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5982_u679C_uFF0C_u4F60_u62B1_u6028_u73B0_u5728_u7684_u751F_u6D3B_u8FD9_u4E48_u8270_u8F9B_uFF01_u90A3_u4E48_uFF0C_u51E0_u5341_u5E74_u524D_u7684_u90A3_u573A_u6E38_u6CF3_u6BD4_u8D5B_uFF0C_u4F60_u5C31_u4E0D_u8BE5_u62FF_u7B2C_u4E00_uFF01"><a href="#u5982_u679C_uFF0C_u4F60_u62B1_u6028_u73B0_u5728_u7684_u751F_u6D3B_u8FD9_u4E48_u8270_u8F9B_uFF01_u90A3_u4E48_uFF0C_u51E0_u5341_u5E74_u524D_u7684_u90A3_u573A_u6E38_u6CF3_u6BD4_u8D5B_uFF0C_u4F60_u5C31_u4E0D_u8BE5_u62FF_u7B2C_u4E00_uFF01" class="headerlink" title="如果，你抱怨现在的生活这么艰辛！那么，几十年前的那场游泳比赛，你就不该拿第一！"></a>如果，你抱怨现在的生活这么艰辛！那么，几十年前的那场游泳比赛，你就不该拿第一！</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5982_u679C_uFF0C_u4F60_u62B1_u6028_u73B0_u5728_u7684_u751F_u6D3B_u8FD9_u4E48_u8270_u8F9B_uFF01_u90A3_u4E48_uFF0C_u51E0_u5341_u5E74_]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ivar和objc_property_t方式对自定义模型进行归解档]]></title>
    <link href="http://yoursite.com/2016/06/01/Ivar%E5%92%8Cobjc-property-t%E6%96%B9%E5%BC%8F%E5%AF%B9%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%BD%92%E8%A7%A3%E6%A1%A3/"/>
    <id>http://yoursite.com/2016/06/01/Ivar和objc-property-t方式对自定义模型进行归解档/</id>
    <published>2016-06-01T10:05:24.000Z</published>
    <updated>2016-06-02T01:42:40.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/DaBinGe/UniversalArchiveDemo" target="_blank" rel="external">Go to Github to download the source codes.</a>    </p>
<h1 id="u7B80_u8981_u8BF4_u660E"><a href="#u7B80_u8981_u8BF4_u660E" class="headerlink" title="简要说明"></a>简要说明</h1><p>This demo describes two ways to archive or unarchive all of the NSObject objects and its<br> subclass objects.One way uses Ivar and another uses objc_property_t.<br>本例子通过objc/runtime，分别使用Ivar和objc_property_t两种方式，实现id对象类型的归解档。</p>
<p>IDE:  Mac OS EI Capitan 10.11.4,Xcode 7.3.1 (7D1014)</p>
<h1 id="u5B9E_u73B0_u539F_u7406"><a href="#u5B9E_u73B0_u539F_u7406" class="headerlink" title="实现原理"></a>实现原理</h1><p>Getting the object’s variable names by runtime,and getting variable value by Key-Value-Coding,<br>to encode or decode in loop.<br>通过运行时，循环取出当前对象的变量名，以及KVC通过变量名进行取值赋值，再通过得到的键和值进行归档解档。</p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>相关的Objc运行时模块： @import ObjectiveC.runtime;<br>或头文件： #import <objc runtime.h="">    </objc></p>
<p>Please copy or move the files CommonArchiveModel.h and CommonArchiveModel.m to your project,<br>then you can use it directly.<br>使用时，直接引入通用归解档基类CommonArchiveModel到相应工程中即可。</p>
<h2 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h2><p>Create a new Cocoa Class ,which is subclass of CommonArchiveModel,and add properties<br>and variables to it.Then use the method archiveRootObject:toFile: of NSKeyedArchiver to<br>archive the model to designated path.<br>新建CommonArchiveModel子类，在该子类添加相关的属性或实例变量；<br>把需要归档的子类对象用[NSKeyedArchiver archiveRootObject:toFile:]归档到指定目录下。    </p>
<h3 id="objc_property_t_Archive_Codes"><a href="#objc_property_t_Archive_Codes" class="headerlink" title="objc_property_t Archive Codes"></a>objc_property_t Archive Codes</h3><pre><code>- (void)encodeWithCoder:(NSCoder *)aCoder {
    unsigned int outCount;
    objc_property_t *properties = class_copyPropertyList([self class], &amp;outCount);
    for (int i=0; i&lt;outCount; i++) {
        objc_property_t property = properties[i];
        const char *char_f = property_getName(property);
        //propertyName包含下划线，对此功能并无影响
        NSString *propertyName = [NSString stringWithUTF8String:char_f];
        id propertyValue = [self valueForKey:propertyName];
        if (!propertyName || !propertyValue) {
            continue;
        }
        [aCoder encodeObject:propertyValue forKey:propertyName];
    }
    free(properties);
}
</code></pre><h3 id="Ivar_Archive_Codes"><a href="#Ivar_Archive_Codes" class="headerlink" title="Ivar Archive Codes"></a>Ivar Archive Codes</h3><pre><code>- (void)encodeWithCoder:(NSCoder *)aCoder {
    unsigned int outCount, index;
    Ivar *ivars = class_copyIvarList([self class], &amp;outCount);

    for (index = 0; index &lt; outCount; index++) {
        Ivar varName = ivars[index];
        NSString *varKey = [NSString stringWithCString:ivar_getName(varName) encoding:NSUTF8StringEncoding];
        NSLog(@&quot;encode varKey = %@&quot;,varKey);

        id varValue = [self valueForKey:varKey];//从当前对象取值
        if (!varKey || !varValue || [[self ignoreVarKeys] containsObject:varKey]) {
            continue;
        }
        [aCoder encodeObject:varValue forKey:varKey];//归档
    }
    free(ivars);
}
</code></pre><h2 id="Unarchive"><a href="#Unarchive" class="headerlink" title="Unarchive"></a>Unarchive</h2><p>Call the class method unarchiveObjectWithFile of NSKeyedUnarchiver to unarchive the object<br>which was archived before.And the log its values that is used to compare the values before archive.<br>调用[NSKeyedUnarchiver unarchiveObjectWithFile:]解档一个自定义模型，查看基属性的值是否<br>和之前归档的一致。</p>
<h3 id="objc_property_t_Unarchive_Codes"><a href="#objc_property_t_Unarchive_Codes" class="headerlink" title="objc_property_t Unarchive Codes"></a>objc_property_t Unarchive Codes</h3><pre><code>- (instancetype)initWithCoder:(NSCoder *)aDecoder {
    self = [super init];
    if (self) {
        unsigned int outCount;
        objc_property_t *properties = class_copyPropertyList([self class], &amp;outCount);
        for (int i=0; i&lt;outCount; i++) {
            objc_property_t property = properties[i];
            const char *char_f = property_getName(property);
            NSString *propertyName = [NSString stringWithUTF8String:char_f];
            id propertyValue = [aDecoder decodeObjectForKey:propertyName];
            if (!propertyName || !propertyValue) {
                continue;
            }
            [self setValue:propertyValue forKey:propertyName];//此外可扩展，写个接口传进一个字典，把key/value映射到self
        }
        free(properties);
    }
    return self;
}
</code></pre><h3 id="Ivar_Unarchive_Codes"><a href="#Ivar_Unarchive_Codes" class="headerlink" title="Ivar Unarchive Codes"></a>Ivar Unarchive Codes</h3><pre><code>- (instancetype)initWithCoder:(NSCoder *)aDecoder {
    self = [super init];
    if (self) {
        unsigned int outCount,index;
        Ivar *ivars = class_copyIvarList([self class], &amp;outCount);
        for (index=0; index&lt;outCount; index++) {
            Ivar varName = ivars[index];
            const char *char_f = ivar_getName(varName);
            NSString *varKey = [NSString stringWithUTF8String:char_f];

            id varValue = [aDecoder decodeObjectForKey:varKey];//解档
            if (!varKey || ! varValue  || [[self ignoreVarKeys] containsObject:varKey]) {
                continue;
            }
            NSLog(@&quot;decode varKey = %@&quot;,varKey);
            [self setValue:varValue forKey:varKey];//给当前对象赋值
        }
        free(ivars);
    }
    return self;
}
</code></pre><p>Please look at the project files from Github to know other details.<br>其它细节请查看Github工程文件。</p>
<p><strong>编写本博客相关环境：Mac OS EI Capitan 10.11.4，Mou 0.8.7，Xcode 7.3.1 (7D1014)，iOS 9.3.2</strong>    </p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a>    </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/DaBinGe/UniversalArchiveDemo" target="_blank" rel="external">Go to Github to download the source codes.</a>  ]]>
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据结构-单链表基本操作-C语言]]></title>
    <link href="http://yoursite.com/2016/03/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/03/22/数据结构-单链表基本操作/</id>
    <published>2016-03-22T09:36:13.000Z</published>
    <updated>2016-06-02T01:42:33.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/DaBinGe/SingleLinkedList_C" target="_blank" rel="external">Go to Github to download the source codes.</a>   </p>
<h1 id="1-_IDE"><a href="#1-_IDE" class="headerlink" title="1.    IDE"></a>1.    IDE</h1><p><strong> Mac OS EI Capitan 10.11.3,Xcode 7.2 (7C68),Mou 0.8.7</strong>    </p>
<h1 id="2-_Abstrat"><a href="#2-_Abstrat" class="headerlink" title="2.    Abstrat"></a>2.    Abstrat</h1><p>The basic operations of single linked list in C langeage below:<br>本文主要讲单链表以下这些基本操作：</p>
<ul>
<li>Create  创建</li>
<li>Query   查询</li>
<li>Add     添加</li>
<li>Modify  修改</li>
<li>Sort    排序</li>
<li>Delete  删除</li>
<li>Ergodic    遍历</li>
<li>Other    其它</li>
</ul>
<p>Previously,it is best for you to learn the <strong>typedef struct</strong> syntax first if you have not learned<br>or forget  its usage.<br>如果你没有学过结构体定义的语法或记不清，请先学习它的用法。<br><a href="http://blog.csdn.net/haiou0/article/details/6877718" target="_blank" rel="external">结构体定义：struct与typedef struct 用法详解和用法小结</a><br><a href="http://blog.sina.com.cn/s/blog_4fdabc820100fsxu.html" target="_blank" rel="external">结构体定义 typedef struct 用法详解和用法小结</a></p>
<h1 id="3-_Basic_operations"><a href="#3-_Basic_operations" class="headerlink" title="3.    Basic operations"></a>3.    Basic operations</h1><h2 id="3-1_Create"><a href="#3-1_Create" class="headerlink" title="3.1    Create"></a>3.1    Create</h2><ul>
<li>Create a link with data [0…7] automatically.<br>自动创建结点数据从0到7的单链表。</li>
</ul>
<pre><code>LinkedList_Long createLinked() {
    LinkedList_Long head = createHeadNode();
    if (head == NULL) {
        return NULL;
    }
    LongNodeData amount = 0;
    LinkedList_Long pLast = NULL;
    for (LongNodeData index = 0; index &lt; 8; index++) {
        LinkedList_Long pNext = createHeadNode();
        if (pNext == NULL) {
            return head;
        }
        if (!index) {//append the first node to header
            pLast = pNext;
            head-&gt;next = pLast;

        }else {//appending the node to last node
            pLast-&gt;next = pNext;
            pLast = pNext;
        }
        pNext-&gt;data = index;
        amount++;
    }
    head-&gt;data = amount;

    return head;
}
</code></pre><ul>
<li>Create link and receive user’s input continously unless entering the exitData to stop.<br>创建链表并连续接收用户输入的数据，输入指定的数据来结束此次创建。</li>
</ul>
<pre><code>LinkedList_Long createLinkedListWithExitData(LongNodeData exitData,bool isAtHeader) {
    LinkedList_Long head = createHeadNode();
    if (head == NULL) {
        return NULL;
    }
    LongNodeData amount = 0;
    LinkedList_Long pLast = isAtHeader ? NULL : head;

    while (1) {
        LinkedList_Long pNext = createHeadNode();
        if (pNext == NULL) {
            break;
        }
        printf(&quot;Enter an integer data,enter %lld to exit the creating.\n&quot;,exitData);
        scanf(&quot;%lld&quot;,&amp;pNext-&gt;data);
        if (pNext-&gt;data == exitData) {
            break;
        }
        if (isAtHeader) {//add to header
            if (amount != 0) {//is not the first node
                pNext-&gt;next = pLast;
            }
        }else {//add to tail
            pLast-&gt;next = pNext;
        }
        pLast = pNext;
        amount++;
    }
    head-&gt;data = amount;
    if (isAtHeader) {
        head-&gt;next = pLast;
    }
    return head;
}
</code></pre><h2 id="3-2_Query"><a href="#3-2_Query" class="headerlink" title="3.2    Query"></a>3.2    Query</h2><ul>
<li>Query the node at index of the link.<br>根据索引获取结点。</li>
</ul>
<pre><code>LinkedList_Long nodeAtIndex(LinkedList_Long head,LongNodeData index) {
    if (head == NULL) {
        return NULL;
    }
    if (index &lt; 0) {
        printf(&quot;Please enter an non-negative integer.\n&quot;);
        return NULL;
    }
    if (index &gt;= head-&gt;data) {
        printf(&quot;The index %lld beyond bounds [0...%lld],and \n&quot;
               &quot;please be sure the index is counted from 0.\n&quot;,index,head-&gt;data - 1);
        return NULL;
    }

    LinkedList_Long pNext = head-&gt;next;
    LongNodeData num = 0;
    while (pNext &amp;&amp; num &lt; index) {
        pNext = pNext-&gt;next;
        num++;
    }
    return pNext;
}
</code></pre><ul>
<li>Query the lastest node of the link.<br>获取链表最后一个结点。</li>
</ul>
<pre><code>LinkedList_Long lastNodeOfLinkedList(LinkedList_Long head) {
    if (head == NULL) {
        return NULL;
    }
    LinkedList_Long pNext = head-&gt;next;
    if (pNext == NULL) {
        return NULL;
    }
    while (pNext-&gt;next) {
        pNext = pNext-&gt;next;
    }
    return pNext;
}
</code></pre><h2 id="3-3_Insert"><a href="#3-3_Insert" class="headerlink" title="3.3    Insert"></a>3.3    Insert</h2><ul>
<li>Insert a new node,inputed by user instantly, at index of the link.<br>在指定索引插入节点</li>
</ul>
<pre><code>LinkedList_Long insertOneNodeAtIndex(LinkedList_Long head) {
    if (head == NULL) {
        printf(&quot;Insert failed,as the linked list is NULL.&quot;);
        return head;
    }
    LinkedList_Long node = createHeadNode();
    if (node == NULL) {
        printf(&quot;Insert failed for the sake of memory error.\n&quot;);
        return head;
    }
    LongNodeData index = 0;
    printf(&quot;Enter the index,a non-negative integer,as the insert location.\n&quot;);
    scanf(&quot;%lld&quot;,&amp;index);
    while (!isIndexInsideLinkedList(index, head)) {
        printf(&quot;please enter agan.\n&quot;);
        index = 0;
        scanf(&quot;%lld&quot;,&amp;index);
    }
    printf(&quot;please enter the data.\n&quot;);
    scanf(&quot;%lld&quot;,&amp;node-&gt;data);

    if (index &lt; 0) {
        index = 0;
    }
    return insertNodeIntoListAtIndex(head, node, index);
}
</code></pre><ul>
<li>Insert the node into the link at index of the link.<br>插入一个结点到链表的指定索引</li>
</ul>
<pre><code>LinkedList_Long insertNodeIntoListAtIndex(LinkedList_Long head,LinkedList_Long node,LongNodeData index) {
    if (head == NULL) {
        return NULL;
    }
    if (node == NULL) {
        printf(&quot;Insert failed,because the node is NULL.\n&quot;);
        return head;
    }
    if ((*head).next == NULL) {//node count is 0
        (*head).next = node;
        return head;
    }
    if (index &gt; (*head).data - 1) {
        LinkedList_Long tailNode = lastNodeOfLinkedList(head);
        (*tailNode).next = node;

    }else {
        if (index == 0) {
            (*node).next = (*head).next;
            (*head).next = node;
        }else {
            LinkedList_Long lastNode = nodeAtIndex(head, index - 1);
            if (lastNode == NULL) {
                printf(&quot;Got node at index failed!\n&quot;);
                return head;
            }
            (*node).next = (*lastNode).next;
            (*lastNode).next = node;
        }
    }

    return head;
}
</code></pre><h2 id="3-4_Modify"><a href="#3-4_Modify" class="headerlink" title="3.4    Modify"></a>3.4    Modify</h2><ul>
<li>Exchage two data of two nodes.<br>交换两个结点的数据。</li>
</ul>
<pre><code>void exchangeTwoNodeData(LinkedList_Long nodeLeft,LinkedList_Long nodeRight) {
    LongNodeData data = nodeLeft-&gt;data;
    nodeLeft-&gt;data = nodeRight-&gt;data;
    nodeRight-&gt;data = data;
}
</code></pre><ul>
<li>Exchage two nodes’ data of the link in the two indexs.<br>通过索引交换两个结点。</li>
</ul>
<pre><code>LinkedList_Long exchageTwoNode (LinkedList_Long head,LongNodeData indexLeft,LongNodeData indexRight) {
    if (head == NULL) {
        printf(&quot;Exchaged failed.The linkedList is NULL\n&quot;);
        return head;
    }
    if (head-&gt;data &lt; 1) {
        printf(&quot;Exchaged failed.The linkedList has nodes less than 2.\n&quot;);
        return head;
    }
    if (indexRight == indexLeft) {
        return head;
    }
    if (!isIndexInsideLinkedList(indexLeft, head) || !isIndexInsideLinkedList(indexRight, head)) {
        return head;
    }

    printf(&quot;Begin exchaging two node.\n&quot;);
    LinkedList_Long nodeLeft = nodeAtIndex(head, indexLeft);
    LinkedList_Long nodeRight = nodeAtIndex(head, indexRight);
    exchangeTwoNodeData(nodeLeft, nodeRight);
    return head;
}
</code></pre><ul>
<li>Revert the link by operating its datas.<br>链表逆置。</li>
</ul>
<pre><code>void revertLinkedList (LinkedList_Long head) {
    if (head == NULL) {
        printf(&quot;Revert failed,the linkedList is NULL.\n&quot;);
        return;
    }
    LongNodeData count = head-&gt;data - 1;
    if (count &lt; 2) {
        return;
    }
    for (LongNodeData index = 0; index &lt; count; index++,count--) {
        exchageTwoNode(head, index, count);
    }
}
</code></pre><h2 id="3-5_Sort"><a href="#3-5_Sort" class="headerlink" title="3.5    Sort"></a>3.5    Sort</h2><p>Sort the link with two ways,by operating the node count or node pointer.<br>通过操作链表结点个数或者结点指针对链表进行排序。</p>
<pre><code>LinkedList_Long sortLinkedList(LinkedList_Long head,bool accending) {
    //mode 1,using node count
    if (head-&gt;data &lt; 1) {
        return head;
    }
    LinkedList_Long node = head-&gt;next;
    for (LongNodeData row = 0; row &lt; head-&gt;data - 1; row++) {
        LinkedList_Long pNext = node-&gt;next;
        if (pNext == NULL || node == NULL) {
            break;
        }
        for (LongNodeData coloum = 0; coloum &lt; head-&gt;data; coloum++) {
            if (accending) {
                if (node-&gt;data &gt; pNext-&gt;data) {
                    exchangeTwoNodeData(node, pNext);
                }
            }else {
                if (node-&gt;data &lt; pNext-&gt;data) {
                    exchangeTwoNodeData(node, pNext);
                }
            }
            pNext = pNext-&gt;next;
            if (pNext == NULL) {
                break;
            }
        }
        node = node-&gt;next;
    }

    return head;

    //mode 2,using pointer
    if (head-&gt;next == NULL) {
        return head;
    }
    LinkedList_Long qNode = head-&gt;next;
    while (qNode) {
        LinkedList_Long qNext = qNode-&gt;next;
        while (qNext) {
            if (accending) {
                if (qNode-&gt;data &gt; qNext-&gt;data) {
                    exchangeTwoNodeData(qNode, qNext);
                }
            }else {
                if (qNode-&gt;data &lt; qNext-&gt;data) {
                    exchangeTwoNodeData(qNode, qNext);
                }
            }
            qNext = qNext-&gt;next;
        }
        qNode = qNode-&gt;next;
    }
    return head;
}
</code></pre><h2 id="3-6_Delete"><a href="#3-6_Delete" class="headerlink" title="3.6    Delete"></a>3.6    Delete</h2><ul>
<li>Delete one node at the index of the link.<br>删除一个指定索引的结点。</li>
</ul>
<pre><code>LinkedList_Long deleteNodeAtIndex (LinkedList_Long head,LongNodeData index) {
    if (head == NULL) {
        printf(&quot;Delete failed,the linked list is NULL.\n&quot;);
        return head;
    }
    if (head-&gt;next == NULL) {
        printf(&quot;Delete failed,the linked list&#39;s node count is 0.\n&quot;);
        return head;
    }
    if (index &gt;= head-&gt;data) {
        printf(&quot;Delete failed,index %lld beyond bounds [0...%lld].\n&quot;,index,head-&gt;data);
        return head;
    }
    if (index == 0) {
        LinkedList_Long node = nodeAtIndex(head, 0);
        head-&gt;next = node-&gt;next;
        node-&gt;next = NULL;
        free(node);

    }else {
        LinkedList_Long node = nodeAtIndex(head, index - 1);
        LinkedList_Long nodeDelete = node-&gt;next;
        node-&gt;next = nodeDelete-&gt;next;
        nodeDelete = NULL;
        free(nodeDelete);

    }
    head-&gt;data--;
    return head;
}
</code></pre><ul>
<li>Delete the whole link and release the memory,release the header node if neccessary.<br>整个链表删除及释放内存，有需要可把头结点也删除。</li>
</ul>
<pre><code>LinkedList_Long deleteLinkedList (LinkedList_Long head) {
    if (head == NULL) {
        printf(&quot;The linkedList is NULL.\n&quot;);
        return NULL;
    }
    LinkedList_Long list = head-&gt;next;
    if (list == NULL) {
        printf(&quot;The LinkedList has no node.\n&quot;);
        return head;
    }
    LongNodeData index = 0;
    while (list) {
        LinkedList_Long node = list;
        list = list-&gt;next;
        printf(&quot;delete node %lld at index %lld.\n&quot;,node-&gt;data,index++);
        node-&gt;next = NULL;
        node = NULL;
        free(node);
        head-&gt;data--;
    }
    head-&gt;next = NULL;
    free(head-&gt;next);

    return head;
}
</code></pre><h2 id="3-7_Ergodic"><a href="#3-7_Ergodic" class="headerlink" title="3.7    Ergodic"></a>3.7    Ergodic</h2><ul>
<li>Print the node’s data.<br>打印指定结点的数据。</li>
</ul>
<pre><code>void printLinkedNode(LinkedList_Long headNode) {
    if (headNode == NULL) {
        printf(&quot;The node is NULL.\n&quot;);
        return;
    }
    printf(&quot;The node data is %lld.\n&quot;,headNode-&gt;data);
}
</code></pre><ul>
<li>Print the whole link’s datas.<br>打印链表的所有数据。</li>
</ul>
<pre><code>void printLinkedList(LinkedList_Long headNode) {
    LinkedList_Long pNext = headNode-&gt;next;
    printf(&quot;The linked list has %lld nodes,it is : \n&quot;,headNode-&gt;data);

    while (pNext != NULL) {
        printf(&quot;%lld, &quot;,pNext-&gt;data);
        pNext = pNext-&gt;next;
    }
    printf(&quot;\n&quot;);
}
</code></pre><h2 id="3-8_Other"><a href="#3-8_Other" class="headerlink" title="3.8    Other"></a>3.8    Other</h2><ul>
<li>Judging the index is beyond the link or not.<br>判断索引是否超出链表范围。</li>
</ul>
<pre><code>bool isIndexInsideLinkedList(LongNodeData index,LinkedList_Long head) {
    if (index &gt;= head-&gt;data) {
        printf(&quot;Index %lld beyond bounds [0...%lld].\n&quot;,index,head-&gt;data - 1);
        return 0;
    }
    return 1;
}
</code></pre><h1 id="4-_Test_guide"><a href="#4-_Test_guide" class="headerlink" title="4.    Test guide"></a>4.    Test guide</h1><p>Testing the create function following is primary.The other create functions is similar.<br>首先测试下面创建链表的方法，其它创建链表的方法也类似。</p>
<pre><code>    LinkedList_Long head = createLinked();
    printLinkedList(head);
</code></pre><p>Other testing is the same as the following sort test function.<br>其它函数的测试也和下面排序的函数一样。</p>
<pre><code>    LinkedList_Long head = createLinked();
    printLinkedList(head);
    head = sortLinkedList(head, 1);
    printf(&quot;*******  Sort results  *****\n&quot;);
    printLinkedList(head);
</code></pre><p>Copyright reserved,reprinted from dabin’s <a href="https://dabinge.github.io/2016/03/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/" target="_blank" rel="external">Data structure - Single linked list’s basic operations - C langeage</a>.<br>转载请标明出处，转自大彬的 <a href="https://dabinge.github.io/2016/03/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/" target="_blank" rel="external">数据结构-单链表基本操作-C语言</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/DaBinGe/SingleLinkedList_C" target="_blank" rel="external">Go to Github to download the source codes.</a>   <]]>
    </summary>
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发 Touch ID 系统功能之指纹识别]]></title>
    <link href="http://yoursite.com/2016/03/18/iOS%E5%BC%80%E5%8F%91-Touch-ID-%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E4%B9%8B%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2016/03/18/iOS开发-Touch-ID-系统功能之指纹识别/</id>
    <published>2016-03-18T07:35:07.000Z</published>
    <updated>2016-06-02T01:36:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><p>This blog will simply shows the basic usage of <strong>Touch ID</strong>,one of the device’s system<br>common fuctions,in both Objective C code and Swift code.<br>本文将通过 ObjC 和 Swift 分别介绍常用的系统功能–<strong>Touch ID指纹识别</strong>的基本使用。</p>
<p>Touch ID is one of the new features of iOS 8.0 version.So the device’s operation<br> system version must be equal or greater than 8.0 .And,the iOS Simulators are unavalable.<br>Touch ID指纹识别是iOS 8.0的新特性，所以设备的系统版本必须大于等于8.0.而且不能在模拟器上使用该功能。</p>
<h2 id="ObjC_Codes"><a href="#ObjC_Codes" class="headerlink" title="ObjC Codes"></a>ObjC Codes</h2><pre><code> #import &lt;LocalAuthentication/LocalAuthentication.h&gt;
</code></pre><pre><code>- (void)authenticateUser {
    if ([[[UIDevice currentDevice]systemVersion] floatValue] &lt; 8.0) {
        //point out that Touch ID in current device&#39;s OS is unavalable.

        return;
    }
    LAContext *context = [[LAContext alloc]init];
    NSError *error = nil;
    NSString *message = @&quot;通过验证指纹解锁&quot;;

    if ([context canEvaluatePolicy:
         LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error]) {//touch id可用
        [context evaluatePolicy:
         LAPolicyDeviceOwnerAuthenticationWithBiometrics
                localizedReason:message
                          reply:^(BOOL success, NSError * _Nullable error) {
            if (success) {
                NSLog(@&quot;验证成功&quot;);
            }else {//验证出错
                [self authenicateErrorWithCode:error.code];
            }
        }];
    }else {
        [self authenicateUnavalableWithCode:error.code];
    }

}
</code></pre><p>Error code enumeration below.Because of the limit of all versions and sizes of<br>devices,a few errors are not tested.<br>以下是异常情况枚举。由于没有各版本各型号的设备，所以有少部分错误类型没有被验证。</p>
<pre><code>- (void)authenicateErrorWithCode:(NSInteger)code {//识别指纹错误
    switch (code) {
        case LAErrorSystemCancel:
        {
            NSLog(@&quot;系统取消验证,如用户切换到其它app&quot;);
        }
            break;
            case LAErrorUserCancel:
        {
            NSLog(@&quot;用户取消验证&quot;);
        }
            break;
            case LAErrorUserFallback:
        {
            NSLog(@&quot;用户选择输入密码&quot;);
        }
            break;
        case LAErrorTouchIDLockout://&gt;=ios 9.0
        {
            NSLog(@&quot;用户多次验证指纹被锁，要求用密码解锁touch id&quot;);
        }
            break;
            case LAErrorAppCancel:
        {
            NSLog(@&quot;被其它更高优先级的app取消，如来电&quot;);
        }
            break;
        case LAErrorInvalidContext:
        {
            NSLog(@&quot;LAContext对象被从内存中释放了&quot;);
        }
            break;
        default:
            [self authenicateUnavalableWithCode:code];
            break;
    }
}

- (void)authenicateUnavalableWithCode:(NSInteger)code {//授权错误
    switch (code) {
        case LAErrorAuthenticationFailed://ios8.0
        {
            NSLog(@&quot;用户未提供有效的验证，如用户多次验证指纹被锁，要求用密码解锁touch id&quot;);
        }
            break;
        case LAErrorTouchIDNotAvailable:
        {
            NSLog(@&quot;touch id 不可用，设备不支持&quot;);
        }
            break;
        case LAErrorTouchIDNotEnrolled:
        {
            NSLog(@&quot;用户未录入指纹&quot;);
        }
            break;
        case LAErrorPasscodeNotSet:
        {
            NSLog(@&quot;未设置密码&quot;);
        }
            break;
        default:
            break;
    }
}
</code></pre><h2 id="Swift_Codes"><a href="#Swift_Codes" class="headerlink" title="Swift Codes"></a>Swift Codes</h2><pre><code>import LocalAuthentication
</code></pre><pre><code>    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated);
        if Float(UIDevice.currentDevice().systemVersion) &gt; 8.0 {            
            self.authenticateUser()
        }
    }


    func authenticateUser() {
        let authenticateContext : LAContext = LAContext()
//        var authenticateContext : LAContext = LAContext()
        var error : NSError?
        if authenticateContext.canEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, error: &amp;error) {
            [authenticateContext.evaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics,
                localizedReason: &quot;通过验证home键指纹解锁&quot;,
                reply: { (succeed : Bool, evaluatePolicyError : NSError?) -&gt; Void in
                if succeed {
                    print(&quot;验证成功&quot;)//println(&quot;&quot;)在swift2.0已禁用
                }else {
                    self.evaluateErrorWithCode(evaluatePolicyError!.code)
                }
            })]
        }else {
            self.evaluateErrorWithCode(error!.code)
        }
    }
</code></pre><pre><code>    func evaluateErrorWithCode(code : Int) {
        switch code {
        case LAError.AuthenticationFailed.rawValue:
            print(&quot;AuthenticationFailed&quot;)
        case LAError.UserCancel.rawValue:
            print(&quot;UserCancel&quot;)
        case LAError.UserFallback.rawValue:
            print(&quot;User Fallback&quot;)
        case LAError.SystemCancel.rawValue:
            print(&quot;System Cancel&quot;)
        case LAError.PasscodeNotSet.rawValue:
            print(&quot;Passcode Not Set&quot;)
        case LAError.TouchIDNotAvailable.rawValue:
            print(&quot;TouchID Not Available&quot;)
        case LAError.TouchIDNotEnrolled.rawValue:
            print(&quot;TouchID Not Enrolled&quot;)

//        case LAError.TouchIDLockout.rowValue:
//            print(&quot;&quot;);
        default:
            print(&quot;TouchID Lockout or AppCancel or Invalid Context&quot;)
        }

    }
</code></pre><p>This is my first Swift Demo.The following reference documents should be learn for the<br>newbie in this demo.</p>
<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html" target="_blank" rel="external">Swift Official Documentation</a>，the primary learning of writing “<strong>func</strong>“.    </p>
<p><a href="http://www.zgxue.com/167/1679428.html" target="_blank" rel="external">Swift 数据类型转换</a>    </p>
<p><a href="http://www.tuicool.com/articles/uUvYjar" target="_blank" rel="external">Difference between var and let</a>    </p>
<p><a href="http://blog.csdn.net/zhangao0086/article/details/38667315" target="_blank" rel="external">Swift switch usage</a></p>
<p><a href="http://c.biancheng.net/cpp/html/2426.html" target="_blank" rel="external">Swift enum</a></p>
<p><a href="http://blog.csdn.net/super_lee2013/article/details/47626427" target="_blank" rel="external">Differance between rawValue and hashValue</a>    </p>
<p><strong>编写本博客相关环境：Mac OS 10.11.3，Mou 0.8.7，Xcode 7.2 (7C68)，iOS 9.2</strong></p>
<p>转自大彬的 <a href="http://dabinge.github.io/2016/03/18/iOS%E5%BC%80%E5%8F%91-Touch-ID-%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E4%B9%8B%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/" target="_blank" rel="external">iOS开发 Touch ID 系统功能之指纹识别</a></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><p>This blog will simply shows the basic usage of <st]]>
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发 输入字数计算、限制]]></title>
    <link href="http://yoursite.com/2016/03/18/iOS%E5%BC%80%E5%8F%91-%E8%BE%93%E5%85%A5%E5%AD%97%E6%95%B0%E8%AE%A1%E7%AE%97%E3%80%81%E9%99%90%E5%88%B6/"/>
    <id>http://yoursite.com/2016/03/18/iOS开发-输入字数计算、限制/</id>
    <published>2016-03-18T01:24:01.000Z</published>
    <updated>2016-06-12T10:08:19.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This is a introduction of caculating or limiting text <strong>word counts</strong>.<br>The text is divided into <em>DBC case charaters</em> and <em>SBC case charaters</em>.<br>本文介绍<em>全角字符</em>和<em>忽略全角字符</em>的文本字数统计或限制。</p>
<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><ul>
<li><p>Editting in UITextField,these codes should be use for the protocol method<br>“- (BOOL)textField:(UITextField <em>)textField shouldChangeCharactersInRange:<br>(NSRange)range replacementString:(NSString </em>)string”,while UITextView is<br>“- (BOOL)textView:(UITextView <em>)textView shouldChangeTextInRange:(NSRange)range<br>replacementText:(NSString </em>)text”.    </p>
</li>
<li><p>在UITextField和UITextView编辑时，以下代码分别用在其”输入许可”的代理方法shouldChangeCharactersInRange<br>和shouldChangeTextInRange中。</p>
</li>
</ul>
<h1 id="DBC_case__28Half-width_29_characters"><a href="#DBC_case__28Half-width_29_characters" class="headerlink" title="DBC case (Half-width) characters"></a>DBC case (Half-width) characters</h1><ul>
<li>Considering NSString objctive’s length,such as string.length, as word counts.<br>不考虑全角字符</li>
</ul>
<pre><code>    if (range.location &gt;= wordCount &amp;&amp; string.length) {
        return NO;
    }else if (string.length + range.location &gt; wordCount) {
        textField.text = [textField.text stringByAppendingString:[string substringToIndex:wordCount - range.location]];
        return NO;
    }
    return YES;
</code></pre><h1 id="SBC_case__28Full-width_29_charaters"><a href="#SBC_case__28Full-width_29_charaters" class="headerlink" title="SBC case (Full-width) charaters"></a>SBC case (Full-width) charaters</h1><ul>
<li>A Full-width charater is counted two byte,a Half-width charater is counted one<br>byte.<br>区分全角、半角计算文本字数。<br>The limitCount is a const integer value which is the max count that user can input.<br>limitCount是允许用户输入的最大字数。</li>
</ul>
<pre><code>    if (!text.length) {//backspace
        return YES;
    }
    int count = [self wordCountWithText:[textView.text stringByAppendingString:text]];//charater counts
    if (count &gt;= limitCount) {
        count = limitCount - [self wordCountWithText:textView.text];//The remaining words
        textView.text = [textView.text stringByAppendingString:[text substringToIndex:count / 2]];
        _lbCount.text = @&quot;0&quot;;
        return NO;
    }
    return YES;
</code></pre><pre><code>- (int)wordCountWithText:(NSString*)text {
    if (!text || !text.length) {
        return 0;
    }
    int length = 0;
    char *point = (char*)[text cStringUsingEncoding:NSUnicodeStringEncoding];
    NSUInteger lengthEncode = [text lengthOfBytesUsingEncoding:NSUnicodeStringEncoding];
    for (NSUInteger index = 0; index &lt; lengthEncode; index++) {
        if (*point) {
            length++;
        }
        point++;
    }
    return length;
}
</code></pre><ul>
<li>Another way below is caculating for the Full-width charaters count:<br>下面的方法是计算包含全角字符的文本字数：</li>
</ul>
<pre><code>#import &quot;RegexKitLite.h&quot;
</code></pre><pre><code>- (int)calcStrWordCount:(NSString *)str {
    int nResult = 0;
    NSString *strSourceCpy = [str copy];
    NSMutableString *strCopy =[[NSMutableString alloc] initWithString: strSourceCpy];
    NSArray *array = [strCopy componentsMatchedByRegex:@&quot;((news|telnet|nttp|file|http|ftp|https)://){1}&quot;
    &quot;(([-A-Za-z0-9]+(\\.[-A-Za-z0-9]+)*(\\.[-A-Za-z]{2,5}))|([0-9]{1,3}(\\.[0-9]{1,3}){3}))(:[0-9]*)&quot;
    &quot;?(/[-A-Za-z0-9_\\$\\.\\+\\!\\*\\(\\),;:@&amp;=\\?/~\\#\\%]*)*&quot;];
    if ([array count] &gt; 0) {
        for (NSString *itemInfo in array) {
            NSRange searchRange = {0};
            searchRange.location = 0;
            searchRange.length = [strCopy length];
            [strCopy replaceOccurrencesOfString:itemInfo withString:@&quot; &quot; options:NSCaseInsensitiveSearch range:searchRange];
        }
    }

    char *pchSource = (char *)[strCopy cStringUsingEncoding:NSUTF8StringEncoding];
    int sourcelen = strlen(pchSource);

    int nCurNum = 0; //current word count
    for (int n = 0; n &lt; sourcelen; ) {
        if( *pchSource &amp; 0x80 ) {
            pchSource += 3; // NSUTF8StringEncoding encoding Chinese words is counted as 3 bytes
            n += 3;
            nCurNum += 2;
        }
        else {
            pchSource++;
            n += 1;
            nCurNum += 1;
        }
    }
    //the last word that insuffices one is calculated for one
    nResult = nCurNum / 2 + nCurNum % 2;  

    [strSourceCpy release];
    [strCopy release];
    return nResult;
}
</code></pre><p>The limit word count codes above compatible with users’ <strong>paste</strong> action.<br>以上限制字数代码在用户粘贴时也有效。</p>
<p><strong>编写本博客相关环境：Mac OS 10.11.3，Mou 0.8.7，Xcode 7.2 (7C68)，iOS 9.2</strong></p>
<p>转自大彬的 <a href="http://dabinge.github.io/2016/03/18/iOS%E5%BC%80%E5%8F%91-%E8%BE%93%E5%85%A5%E5%AD%97%E6%95%B0%E8%AE%A1%E7%AE%97%E3%80%81%E9%99%90%E5%88%B6/" target="_blank" rel="external">iOS开发 输入字数计算、限制</a></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This is a introduction of caculating or limiting t]]>
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编写博客]]></title>
    <link href="http://yoursite.com/2016/02/26/%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/02/26/编写博客/</id>
    <published>2016-02-26T07:30:57.000Z</published>
    <updated>2016-06-02T01:31:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>  新手编写博客，要先选择和安装好博客编写软件，还要学习编写相关的语法。<br>  软件主要介绍Markdown Editors，下面会列出给大家参考。<br>  平时浏览网页，相信大家也见过网页上有标题、链接、高亮、图片、表格和文本块等。要实现这些效果，<br>显然也要遵循一定的规则或者说是语法。而编写博客的语法可以用HTML，也可以用Markdown，或者<br>两种同时使用。</p>
<h1 id="Markdown_Editors"><a href="#Markdown_Editors" class="headerlink" title="Markdown Editors"></a>Markdown Editors</h1><h2 id="Mac_Markdown_u7F16_u8F91_u5668"><a href="#Mac_Markdown_u7F16_u8F91_u5668" class="headerlink" title="Mac Markdown编辑器"></a>Mac Markdown编辑器</h2><p>StackEdit、MDEditor、简书、马克飞象、Marxico是在线编辑器，其它是客户端<br>FarBox、Cmd Markdown、小书匠、Sublime Text和Atom 支持多平台</p>
<h3 id="Mac_u6536_u8D39_u8F6F_u4EF6"><a href="#Mac_u6536_u8D39_u8F6F_u4EF6" class="headerlink" title="Mac收费软件"></a>Mac收费软件</h3><ul>
<li><a href="https://maxiang.io/" target="_blank" rel="external">马克飞象 Maxiang</a>，10天试用</li>
<li><a href="https://bywordapp.com/" target="_blank" rel="external">Byword</a>，移动端和电脑端都可以使用</li>
<li><a href="https://ia.net/writer/ios" target="_blank" rel="external">iA Writer</a>，移动端和电脑端都可以使用</li>
<li><a href="http://www.ulyssesapp.com/" target="_blank" rel="external">Ulysses</a>，可用于Mac和iPad</li>
<li><a href="https://71squared.com/focused" target="_blank" rel="external">Typed</a></li>
</ul>
<h3 id="Mac_u514D_u8D39_u8F6F_u4EF6"><a href="#Mac_u514D_u8D39_u8F6F_u4EF6" class="headerlink" title="Mac免费软件"></a>Mac免费软件</h3><p>小编查找的时候，遇到要注册帐号的已经列出</p>
<ul>
<li><a href="https://stackedit.io/editor" target="_blank" rel="external">StackEdit</a></li>
<li><a href="http://dillinger.io/" target="_blank" rel="external">Dillinger</a></li>
<li><a href="http://www.marxi.co/" target="_blank" rel="external">Marxico</a>，要注册帐号</li>
<li><a href="https://coding.net/" target="_blank" rel="external">Coding</a>，要注册帐号</li>
<li><a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a>，要注册帐号</li>
<li><a href="http://mahua.jser.me/" target="_blank" rel="external">MaHua</a></li>
<li><a href="http://soft.xiaoshujiang.com/" target="_blank" rel="external">小书匠</a></li>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd MarkDown</a>，要注册帐号，部分语法只适合用在它的平台</li>
<li><a href="https://www.farbox.com/" target="_blank" rel="external">FarBox</a></li>
<li><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></li>
<li><a href="https://atom.io/" target="_blank" rel="external">Atom</a></li>
<li><a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>，小编使用的就是它</li>
<li><a href="http://www.typora.io/" target="_blank" rel="external">Typora</a></li>
<li><a href="http://macdown.uranusjr.com/" target="_blank" rel="external">MacDown</a></li>
<li><a href="http://pad.haroopress.com/user.html" target="_blank" rel="external">Haroopad</a></li>
<li><a href="http://jbt.github.io/markdown-editor/" target="_blank" rel="external">Markdown Editor</a>，很官方的名字，小伙伴们可以试用看看</li>
<li><a href="https://github.com/dragondjf/QMarkdowner" target="_blank" rel="external">QMarkDowner</a></li>
</ul>
<h3 id="Windows_u76F8_u5173_u8F6F_u4EF6"><a href="#Windows_u76F8_u5173_u8F6F_u4EF6" class="headerlink" title="Windows相关软件"></a>Windows相关软件</h3><ul>
<li><a href="http://www.markdownpad.com/" target="_blank" rel="external">MarkdownPad</a></li>
<li><a href="http://git.oschina.net/elerao/Smark" target="_blank" rel="external">Smark</a></li>
<li><a href="http://www.mdcharm.com/" target="_blank" rel="external">MdCharm</a></li>
<li><a href="http://www.appinn.com/miu-markdown-editor/" target="_blank" rel="external">Miu</a></li>
<li><a href="https://github.com/retext-project/retext" target="_blank" rel="external">ReText</a></li>
<li><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a></li>
<li><a href="http://epiceditor.com" target="_blank" rel="external">EpicEditor</a></li>
<li><a href="http://cloose.github.io/CuteMarkEd/#" target="_blank" rel="external">CuteMarkEd</a></li>
</ul>
<h2 id="u7F16_u8BD1_u5668_u8BC4_u4EF7_u53C2_u8003_u94FE_u63A5"><a href="#u7F16_u8BD1_u5668_u8BC4_u4EF7_u53C2_u8003_u94FE_u63A5" class="headerlink" title="编译器评价参考链接"></a>编译器评价参考链接</h2><ul>
<li><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external">好用的markdown编辑器</a></li>
<li><a href="http://www.oschina.net/search?q=markdown&amp;scope=project&amp;fromerr=SBmNEkbX" target="_blank" rel="external">开源中国的markdown软件锦集</a></li>
<li><a href="http://www.zhihu.com/question/20004911" target="_blank" rel="external">Mac上有哪些对Markdown预览支持比较好用的应用</a></li>
<li><a href="http://www.zhihu.com/question/22700184" target="_blank" rel="external">Mac上最好的markdown文本编辑器是什么</a></li>
</ul>
<h1 id="Markdown_u8BED_u6CD5"><a href="#Markdown_u8BED_u6CD5" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><p>Markdown语法并不多，总共10来条，很容易掌握和上手，编写也能马上看到效果。<br>大家下载了Markdown编辑器在软件帮助也能找到Markdown语法说明，参考范例马上<br>着手写吧。<br>下面是语法说明参考文档：</p>
<ul>
<li><a href="https://www.wikimilk.org/markdown-guide/#help" target="_blank" rel="external">Markdown：指南</a></li>
<li><a href="https://www.wikimilk.org/markdown-syntax/" target="_blank" rel="external">Markdown：语法</a></li>
<li><a href="http://baike.baidu.com/link?url=VmJ2H4-nQ7QwGY9zpA6YEQQfxTIZT1IB59_td1cbvL0sT3gQEDRF1XRWfygtRddOy7XUXqFo91KT3BNv_bHHeq" target="_blank" rel="external">百度百科</a></li>
<li><a href="http://wowubuntu.com/markdown/#philosophy" target="_blank" rel="external">Markdown说明中文版</a></li>
<li><a href="https://gitcafe.com/riku/Markdown-Syntax-CN/raw/master/syntax.md" target="_blank" rel="external">Markdown说明中文版源码</a></li>
<li><a href="https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown" target="_blank" rel="external">Cmd markdown语法手册</a></li>
</ul>
<h1 id="u7F16_u5199_u6B65_u9AA4"><a href="#u7F16_u5199_u6B65_u9AA4" class="headerlink" title="编写步骤"></a>编写步骤</h1><ol>
<li><p>博客主目录下，终端新建一编博客</p>
<p>$ hexo new 博客名称</p>
</li>
<li><p>打开Finder，到博客主目录下的source-&gt;_posts下找到对应的“博客名称.md”文件</p>
</li>
<li>用安装好的Markdown编译器打开</li>
<li>参考语法编写内容</li>
<li>保存博客内容</li>
<li><p>终端更新所有内容到网络，包括刚刚编写的博客</p>
<p>$ hexo d -g</p>
</li>
<li><p>到博客（仓库）地址    查看效果，对不满意的更改再更新上去。</p>
</li>
</ol>
<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
<p>博客编写介绍到此结束。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>  新手编写博客，要先选择和安装好博客编写软件，还要学习编写相关的语法。<br>  软件主要介绍Mark]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关联Github博客]]></title>
    <link href="http://yoursite.com/2016/02/26/%E5%85%B3%E8%81%94Github%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/02/26/关联Github博客/</id>
    <published>2016-02-26T03:08:33.000Z</published>
    <updated>2016-06-02T01:31:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>上一编博客已经介绍了<a href="http://dabinge.github.io/2016/02/25/Mac%E4%B8%8BHexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">Mac下Hexo环境搭建</a>，相信大家已经可以看到自己的博客了。<br>但是博客地址是<a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a>，属于本地地址，还要开启服务“hexo server”<br>才能看。而现在有很多人把自己的博客关联到网上的一些平台，<a href="http://blog.sina.com.cn/" target="_blank" rel="external">比如新浪</a>，<a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a>，<br><a href="https://github.com" target="_blank" rel="external">Github</a>和<a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a>等。小编选择的是国际平台的Github，因为Github人气旺，上面<br>的资源比较优质，还考虑到后面要把自己写得好的源码上传到Github，所以选择它。  </p>
<h1 id="u521B_u5EFAGithub_u535A_u5BA2"><a href="#u521B_u5EFAGithub_u535A_u5BA2" class="headerlink" title="创建Github博客"></a>创建Github博客</h1><h2 id="u6CE8_u518CGithub_u5E10_u53F7"><a href="#u6CE8_u518CGithub_u5E10_u53F7" class="headerlink" title="注册Github帐号"></a>注册Github帐号</h2><p>没有Github帐号的小伙伴需要到<a href="https://github.com" target="_blank" rel="external">Github官网</a>上注册一个帐号。</p>
<h2 id="u521B_u5EFA_u4ED3_u5E93"><a href="#u521B_u5EFA_u4ED3_u5E93" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>登录Github后，到个人主页创建一个仓库，找不到入口的小伙伴可参考 <a href="http://jingyan.baidu.com/article/b907e627d3c1d546e7891ceb.html" target="_blank" rel="external">Github创建项目仓库百度经验</a>。</p>
<h2 id="u521B_u5EFAGithub_u535A_u5BA2-1"><a href="#u521B_u5EFAGithub_u535A_u5BA2-1" class="headerlink" title="创建Github博客"></a>创建Github博客</h2><p>Settings-&gt;Update your site-&gt;Auto matic page generator，然后选择主题发布。<br>后面Github博客关联到Hexo的博客后，将使用Hexo的主题，所以在这里可以不用纠结太久。<br>有需要的小伙伴可参考 <a href="http://jingyan.baidu.com/article/ed2a5d1f3732cb09f7be1745.html" target="_blank" rel="external">用Github pages创建自己的个人博客</a>。</p>
<h1 id="u5173_u8054Github_u535A_u5BA2_u548CHexo_u535A_u5BA2"><a href="#u5173_u8054Github_u535A_u5BA2_u548CHexo_u535A_u5BA2" class="headerlink" title="关联Github博客和Hexo博客"></a>关联Github博客和Hexo博客</h1><h2 id="u6B65_u9AA4"><a href="#u6B65_u9AA4" class="headerlink" title="步骤"></a>步骤</h2><p>让仓库地址 <a href="http://Github用户.github.io" target="_blank" rel="external">http://Github用户.github.io</a> 博客显示<a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a> 的博客。<br>到生成的博客主目录下，编辑_config.yml文件，拉到最下面，找到代码 #Deployment，<br>并修改如下：</p>
<pre><code># Deployment
## Docs: http://hexo.io/docs/deployment.html
deploy:
type: git
repository : https://github.com/Github用户（即使有大写也全要是小写）/Github用户（即使有大写也全要是小写）.github.io.git
branch : master
</code></pre><p>类型type后面在hexo 3.0之后要用git，而不是gitbub。</p>
<h2 id="u7EC8_u7AEF_u547D_u4EE4"><a href="#u7EC8_u7AEF_u547D_u4EE4" class="headerlink" title="终端命令"></a>终端命令</h2><pre><code>$ cd ~/Documents/hexo
$ vim _config.yml
</code></pre><p>输入小写字母i进入编辑状态，修改#Deployment下的代码。<br>改好#Deployment后，在英文键盘输入模式下，按Esc，输入冒号和wq保存并退出，如:wq</p>
<pre><code>$ hexo d -g
</code></pre><p>发布后到Github博客，也是仓库地址查看效果。http: //Github用户（即使有大写也全要是小<br>写）.github.io/ ，小编的是 <a href="http://dabinge.github.io/" target="_blank" rel="external">http://dabinge.github.io/</a> 。</p>
<p>至此，关联Github和hexo博客已经完成，下一篇介绍的是<a href="http://dabinge.github.io/2016/02/26/%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">编写博客</a>。</p>
<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>上一编博客已经介绍了<a href="http://dabinge.github.io/2016/02/]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac下Hexo环境搭建]]></title>
    <link href="http://yoursite.com/2016/02/25/Mac%E4%B8%8BHexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/02/25/Mac下Hexo环境搭建/</id>
    <published>2016-02-25T08:15:11.000Z</published>
    <updated>2016-06-02T01:36:52.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>本博客的内容基本都是终端操作，没有使用过终端或者较少使用的小伙伴可直接复制相关<br>命令。有需要的小伙伴可参考<a href="http://www.cnblogs.com/hjzhang/archive/2009/12/04/2043586.html/" target="_blank" rel="external">Unix终端常用命令</a>，<a href="http://itindex.net/detail/47206-mac-%E7%BB%88%E7%AB%AF-%E5%91%BD%E4%BB%A4" target="_blank" rel="external">mac终端命令大全介绍</a>。</p>
<h1 id="u642D_u5EFA_u6B65_u9AA4"><a href="#u642D_u5EFA_u6B65_u9AA4" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p>注：小编在搭建之前已安装有Xcode 7.1，XCode 7.1已连带git一起安装，以下不对git的安装和<br>配置进行描述。有需要的小伙伴或参考<a href="http://git-scm.com/" target="_blank" rel="external">Git官网</a>，<a href="https://www.kernel.org/pub/software/scm/git/" target="_blank" rel="external">Git各版本下载</a>.</p>
<h2 id="u4E0B_u8F7DNode-js"><a href="#u4E0B_u8F7DNode-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h2><p>到<a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js下载官网</a>，选择Mac OS X Installer (.pkg)<br>并下载安装。Node.js的安装会把npm工具一起安装。小编安装的是Node.js v4.2.6 和 npm v2.14.12。</p>
<h2 id="u7EC8_u7AEF_u547D_u4EE4_u64CD_u4F5C"><a href="#u7EC8_u7AEF_u547D_u4EE4_u64CD_u4F5C" class="headerlink" title="终端命令操作"></a>终端命令操作</h2><h2 id="u6253_u5F00_u7EC8_u7AEF"><a href="#u6253_u5F00_u7EC8_u7AEF" class="headerlink" title="打开终端"></a>打开终端</h2><p>方法一：Launchpad-&gt;其他-&gt;终端<br>方法二：Finder-&gt;应用程序-&gt;实用工具-&gt;终端.app</p>
<h3 id="u547D_u4EE4_u64CD_u4F5C_u6B65_u9AA4"><a href="#u547D_u4EE4_u64CD_u4F5C_u6B65_u9AA4" class="headerlink" title="命令操作步骤"></a>命令操作步骤</h3><pre><code>1.    用命令进入到将要存放博客的目录下
$ cd Documents/
2.    生成存放博客的目录
$ mkdir hexo

3.    要输入root用户登录密码，获得root用户权限来安装hexo
$ sudo npm install hexo -g
4.    保存到本地
$ npm install hexo --save

5.    当前目录初始化，或者使用hexo init &lt;folder&gt;，指定目录初始化
$ hexo init
6.    生成博客
$ hexo generate

7.    安装hexo服务
$ sudo npm install hexo-server
8.    生成本地服务，要输入root登录密码
$ sudo npm install hexo-server —save

9.    启动服务,或使用hero s，按Ctrl+C停止运行
$ hexo server
</code></pre><p>10.打开链接 <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a> ,查看生成的博客。如果<br>显示cannot get/，继续安装下面几个文件。</p>
<pre><code>11.1    直接安装缺少的几个包
$ npm install
11.2    继续安装指定的几个包
$ sudo npm install hexo-renderer-ejs --save
$ sudo npm install hexo-renderer-stylus --save
$ sudo npm install hexo-renderer-marked --save
12.    重新生成博客并启动服务（hero server -generate）
$ hexo s -g
13.    重复第10步查看效果
</code></pre><h3 id="u672C_u6B21_u64CD_u4F5C_u6240_u6709_u547D_u4EE4_u96C6"><a href="#u672C_u6B21_u64CD_u4F5C_u6240_u6709_u547D_u4EE4_u96C6" class="headerlink" title="本次操作所有命令集"></a>本次操作所有命令集</h3><pre><code>511  cd Documents/
512  ls
513  mkdir hexo
514  cd hexo/
515  git://github.com/ry/node.git
516  npm instal hexo -g
517  sudo npm install hexo -g
518  hexo init
519  hexo generate
520  npm install hexo --save
521  hexo init
522  hexo generate
523  sudo npm install hexo-server
524  npm update hexo -g
525  npm help
526  npm v
527  npm -verson
528  npm verison
529  hexo help
530  hexo version
531  npm install hexo-server -save
532  npm install hexo-server --save
533  sudo npm install hexo-server --save
534  hexo-server
535  hexo server
536  sudo npm install hexo-renderer-ejs --save
537  npm install hexo-renderer-stylus --save
538  npm install hexo-renderer-marked --save
539  hexo g
540  hexo s
541  npm install hexo-renderer-ejs --save
542  npm install hexo-renderer-ejs --save
543  npm install hexo-renderer-marked --save
544  hexo s -g
545  sudo npm install hexo-renderer-ejs --save
546  sudo npm install hexo-renderer-stylus --save
547  sudo npm install hexo-renderer-marked --save
548  hexo generate
549  hexo server
550  npm install
551  hexo s -g
</code></pre><p>至此，Hexo博客环境已搭建完成，后面介绍的是关联Github博客。</p>
<h1 id="u53C2_u8003_u94FE_u63A5"><a href="#u53C2_u8003_u94FE_u63A5" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js官网</a><br><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js下载（安装包含npm工具</a><br><a href="https://hexo.io/docs/index.html" target="_blank" rel="external">Hexo官方文档</a><br><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">搭建环境博客 1</a><br><a href="http://segmentfault.com/a/1190000000370778" target="_blank" rel="external">搭建环境博客 2</a><br><a href="http://www.zhihu.com/question/35964327" target="_blank" rel="external">打开链接出现Cannot GET/的解决方法</a></p>
<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>本博客的内容基本都是终端操作，没有使用过终端或者较少使用的小伙伴可直接复制相关<br>命令。有需要的小伙]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的书屋]]></title>
    <link href="http://yoursite.com/2016/02/05/%E6%88%91%E7%9A%84%E4%B9%A6%E5%B1%8B/"/>
    <id>http://yoursite.com/2016/02/05/我的书屋/</id>
    <published>2016-02-05T07:39:18.000Z</published>
    <updated>2016-06-02T04:13:05.000Z</updated>
    <content type="html"><![CDATA[<p>注：由于在菜单栏点“我的书屋”经常访问失败，故添加此文章。</p>
<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>小编的大学专业是电子信息工程，软硬件、网络、通信、图像处理和电子设计等什么都学。软件开发<br>方面，从底层的汇编、单片机编程到应用层的数据库和数据结构等都有所学习，但是只学了点基本定<br>义和简单应用，相关书籍在此就不多作介绍了。<br>下面，小编给大家介绍下自开发以来小编看过的一些编程开发的书籍，有兴趣的小伙伴也可以买来学<br>习学习。</p>
<h1 id="u770B_u4E66_u548C_u5176_u5B83_u6DA8_u59FF_u52BF_u65B9_u5F0F_u7684_u5BF9_u6BD4"><a href="#u770B_u4E66_u548C_u5176_u5B83_u6DA8_u59FF_u52BF_u65B9_u5F0F_u7684_u5BF9_u6BD4" class="headerlink" title="看书和其它涨姿势方式的对比"></a>看书和其它涨姿势方式的对比</h1><p>已经做开发的很多小伙伴应该感受到，学习开发相关技术，看视频比看书来得更爽快些。看视频学<br>得快，而且在应用中讲解，学起来理解容易，轻松掌握。</p>
<p>但是看视频学新知识的时候，往往比较难记住，特别是连续看比较多视频时，过后不实践很快忘<br>记了。看有源码的教学视频，相对来说会方便很多。  </p>
<p>看书是看文字类的内容，会要一个比较好的状态，还要理解字里行间的含义，对很多人来说都不想<br>看。主要还是看书上的知识理论性比较强，还要经历转到应用那个层面上，再加上新手想快速学到<br>技术，所以不太接受这种学习方式。</p>
<p>当然看书确定有它的优势。书上的知识讲得比较细致全面，而且看书的时候，可以控制阅读的速度，<br>一个知识点可以看多次，前后翻阅方便。看视频却是跟讲师的步伐，讲解过了要再回顾比较麻烦。<br>从小编的角度看，看书的时候慢慢地领悟有很大的好处，不像看视频多数只是记下讲解的内容。<br>学而不思则罔。一个厉害的人，往往能把众多的存在归类好，并且有很强的联想能力。大家遇到<br>谈论常说“都一样”的人才可以留心观察一下。所以，学习的时候静下来多思考，对一个人的思维、<br>记忆和总结能力都有很大帮助。越接近一个层次的极限越要求这些类型的能力，所以小编还是建议<br>大家能沉得住气看些优秀的书籍。</p>
<p>看官方文档、技术博客和调试Demo等学习方式小编在此就不多说了。下面介绍下开发相关的书籍。</p>
<h1 id="iOS_u5F00_u53D1_u76F8_u5173_u4E66_u7C4D"><a href="#iOS_u5F00_u53D1_u76F8_u5173_u4E66_u7C4D" class="headerlink" title="iOS开发相关书籍"></a>iOS开发相关书籍</h1><ul>
<li><a href="http://item.jd.com/11232703.html" target="_blank" rel="external">《Objective-C基础教程(第2版)》</a></li>
<li><a href="http://item.jd.com/11570795.html" target="_blank" rel="external">《iOS开发之美》</a></li>
<li><a href="http://item.jd.com/11598468.html" target="_blank" rel="external">《iOS开发进阶》</a></li>
<li><a href="http://item.jd.com/11779940.html" target="_blank" rel="external">《精通iOS开发》</a></li>
<li><a href="http://item.jd.com/11258970.html" target="_blank" rel="external">《Objective-C高级编程(iOS与OS X多线程和内存管理)》</a></li>
<li><a href="http://item.jd.com/11779514.html" target="_blank" rel="external">《编写高质量代码-改善Objective-C程序的61个建议》</a></li>
<li><a href="http://item.jd.com/11402853.html" target="_blank" rel="external">《Effective Objective-C 2.0 编写高质量IOS与OS X代码的52个有效方法》</a></li>
<li><a href="http://item.jd.com/11521441.html" target="_blank" rel="external">《iOS数据库应用高级编程(第2版)》</a></li>
<li><a href="http://item.jd.com/11573064.html" target="_blank" rel="external">《iOS高级编程》</a></li>
<li><a href="http://item.jd.com/11804127.html" target="_blank" rel="external">《Xcode江湖录》</a></li>
</ul>
<p><a href="http://item.jd.com/11232703.html" target="_blank" rel="external"><img src="http://img13.360buyimg.com/n1/jfs/t247/212/1041795293/174068/d1fe95f/53f552d0Ncdf82ff5.jpg" alt="Objective-C基础教程(第2版)"></a> <a href="http://item.jd.com/11570795.html" target="_blank" rel="external"><img src="http://img11.360buyimg.com/n1/jfs/t601/105/574258892/19684/550270c6/54752da1N474e18a7.jpg" alt=""></a></p>
<p><a href="http://item.jd.com/11598468.html" target="_blank" rel="external"><img src="http://img13.360buyimg.com/n1/jfs/t547/179/1344222818/45399/42b96584/54cf3cceNe949324a.jpg" alt=""></a> <a href="http://item.jd.com/11779940.html" target="_blank" rel="external"><img src="http://img10.360buyimg.com/n1/jfs/t2206/61/925504346/307363/50cd46b7/56396a8aN0136874e.jpg" alt=""></a></p>
<p><a href="http://item.jd.com/11258970.html" target="_blank" rel="external"><img src="http://img10.360buyimg.com/n1/jfs/t247/66/1055001785/317924/aac69eaa/53f554deN9ee55bb3.jpg" alt=""></a> <a href="http://item.jd.com/11779514.html" target="_blank" rel="external"><img src="http://img14.360buyimg.com/n1/jfs/t2137/263/531782166/82085/bdb2815f/5615f899Nb65ca675.jpg" alt=""></a></p>
<p><a href="http://item.jd.com/11402853.html" target="_blank" rel="external"><img src="http://img13.360buyimg.com/n1/g15/M06/04/1C/rBEhWVL65ZEIAAAAAAENoVI8-poAAIaeAISSO0AAQ25344.jpg" alt=""></a> <a href="http://item.jd.com/11521441.html" target="_blank" rel="external"><img src="http://img11.360buyimg.com/n1/jfs/t217/249/986647661/138322/1912f9dd/53f43b7cN797102f2.jpg" alt=""></a></p>
<p><a href="http://item.jd.com/11573064.html" target="_blank" rel="external"><img src="http://img14.360buyimg.com/n1/jfs/t688/225/364699604/173852/439e4ee3/54617839Nba91d17e.jpg" alt=""></a> <a href="http://item.jd.com/11804127.html" target="_blank" rel="external"><img src="http://img12.360buyimg.com/n1/jfs/t1924/39/1228625231/143064/34dcf600/5649432eN9d097c64.jpg" alt=""></a></p>
<h1 id="u7A0B_u5E8F_u8BBE_u8BA1_u901A_u7528_u4E66_u7C4D"><a href="#u7A0B_u5E8F_u8BBE_u8BA1_u901A_u7528_u4E66_u7C4D" class="headerlink" title="程序设计通用书籍"></a>程序设计通用书籍</h1><ul>
<li><a href="http://item.jd.com/1556045262.html" target="_blank" rel="external">《C语言程序设计教程+学习辅导 第四版》，谭浩强</a></li>
<li><a href="http://item.jd.com/11728740.html" target="_blank" rel="external">《重构:改善既有代码的设计》</a></li>
</ul>
<p><a href="http://item.jd.com/1556045262.html" target="_blank" rel="external"><img src="http://img12.360buyimg.com/n1/jfs/t1309/334/133288736/757179/f90373b0/55504d34N39ba350f.png" alt=""></a> <a href="http://item.jd.com/11728740.html" target="_blank" rel="external"><img src="http://img10.360buyimg.com/n1/jfs/t1690/91/546163065/124955/5fd5f634/55a8c17eNd3918c0c.jpg" alt=""></a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>注：由于在菜单栏点“我的书屋”经常访问失败，故添加此文章。</p>
<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>小编的大学专业是电子信息工程，]]>
    </summary>
    
      <category term="学习资源" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[技术博客编写总括]]></title>
    <link href="http://yoursite.com/2016/02/04/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E6%80%BB%E6%8B%AC/"/>
    <id>http://yoursite.com/2016/02/04/技术博客编写总括/</id>
    <published>2016-02-04T02:10:10.000Z</published>
    <updated>2016-06-02T01:33:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-__u524D_u8A00"><a href="#1-__u524D_u8A00" class="headerlink" title="1.    前言"></a>1.    前言</h1><p>本文主要介绍技术博客从开始到完成编写第一篇技术博客—-也就是此博客，的原因、所要做的事和学的知识。</p>
<h1 id="2-__u5C0F_u7F16_u4E3A_u4F55_u8981_u5199_u6280_u672F_u535A_u5BA2"><a href="#2-__u5C0F_u7F16_u4E3A_u4F55_u8981_u5199_u6280_u672F_u535A_u5BA2" class="headerlink" title="2.    小编为何要写技术博客"></a>2.    小编为何要写技术博客</h1><h2 id="2-1__u548C_u4F17_u795E_u4E00_u6837_uFF0C_u8981_u505A_u4E2A_u6709_u903C_u683C_u7684_u7A0B_u5E8F_u733F"><a href="#2-1__u548C_u4F17_u795E_u4E00_u6837_uFF0C_u8981_u505A_u4E2A_u6709_u903C_u683C_u7684_u7A0B_u5E8F_u733F" class="headerlink" title="2.1    和众神一样，要做个有逼格的程序猿"></a>2.1    和众神一样，要做个有逼格的程序猿</h2><h2 id="2-2__u8BB0_u5F55_u5404_u4E2A_u5C0F_u6A21_u5757_u7684_u77E5_u8BC6_u3002"><a href="#2-2__u8BB0_u5F55_u5404_u4E2A_u5C0F_u6A21_u5757_u7684_u77E5_u8BC6_u3002" class="headerlink" title="2.2    记录各个小模块的知识。"></a>2.2    记录各个小模块的知识。</h2><pre><code>小编从入门开始就有记录和总结知识点的习惯，一直是写到有道云笔记里。小编的表哥是做C++开发的，
毕业前曾听他说把笔记写到有道云上，Windows,Mac和Phone都可以看。
</code></pre><h2 id="2-3__u589E_u5F3A_u81EA_u5DF1_u603B_u7ED3_u5F52_u7EB3_u7684_u80FD_u529B_u3002"><a href="#2-3__u589E_u5F3A_u81EA_u5DF1_u603B_u7ED3_u5F52_u7EB3_u7684_u80FD_u529B_u3002" class="headerlink" title="2.3    增强自己总结归纳的能力。"></a>2.3    增强自己总结归纳的能力。</h2><pre><code>学的知识多了，不总结，不分模块归纳起来，使用起来常会迷茫。如果从宏观的角度整理好知识点，那要
海量的知识点快速筛选到想要的知识能快很多。这点与学习书本知识通过目录总结类似。自己搭建过项目
框架的小伙伴在这个技能上应用很多了。像目录、架构和框架的作用就不多说了。个人觉得这种宏观结构
是相当重要的，所以先要有这生产它的意识，平时多思考和应用它。  
</code></pre><h2 id="2-4__u5E0C_u671B_u80FD_u628A_u4E00_u4E2A_u5C0F_u6A21_u5757_u7684_u6280_u672F_u5B66_u7CBE_u3002"><a href="#2-4__u5E0C_u671B_u80FD_u628A_u4E00_u4E2A_u5C0F_u6A21_u5757_u7684_u6280_u672F_u5B66_u7CBE_u3002" class="headerlink" title="2.4    希望能把一个小模块的技术学精。"></a>2.4    希望能把一个小模块的技术学精。</h2><pre><code>因为要写出一篇拿得出手的技术博客，你不仅要把相关技术学得全面，还要学得精细，并注意到各个细节。
比如：要写iOS开发里，UIButton的按钮类型枚举UIButtonType的技术博客。因为需求的原因，所以
基本上只用Custom类型的，一般人会的就只有一两个类型。如果要写UIButtonType的博客，那么自己
得把各个类型都要用过，写好各类型怎么用，有什么区别，能让别人搜索这个类型的时候，快速找到他们
想到的知识。所以，写博客也能让人把技术学得够精够透。
</code></pre><h2 id="2-5_u63D0_u9AD8_u81EA_u5DF1_u7684_u8868_u8FBE_u80FD_u529B_u3002"><a href="#2-5_u63D0_u9AD8_u81EA_u5DF1_u7684_u8868_u8FBE_u80FD_u529B_u3002" class="headerlink" title="2.5提高自己的表达能力。"></a>2.5提高自己的表达能力。</h2><pre><code>“自己会”和“让别人会”是两个不同的概念，图文表达要到位，即使不能照顾低水平的人，起码能让一般
水平的人看得懂，学得会。
</code></pre><h2 id="2-6_u589E_u52A0_u81EA_u8EAB_u6280_u672F_u7684_u6DF1_u5EA6_u548C_u5E7F_u5EA6_u3002"><a href="#2-6_u589E_u52A0_u81EA_u8EAB_u6280_u672F_u7684_u6DF1_u5EA6_u548C_u5E7F_u5EA6_u3002" class="headerlink" title="2.6增加自身技术的深度和广度。"></a>2.6增加自身技术的深度和广度。</h2><pre><code>因为写要博客，所以会经常去看别人的技术博客，遇到个接口主动搜一下，时间长了，能学到的知识就相
当多了。当然，深度这一块主要还得靠自己，搜尽一切资源，往一个方面专，你也能写AFNetworking
和SDWebImage这样的SDK。
</code></pre><h1 id="3-__u4ECE0_u5230_u53D1_u5E03_u6B64_u6587_u7AE0_u7684_u6D41_u7A0B"><a href="#3-__u4ECE0_u5230_u53D1_u5E03_u6B64_u6587_u7AE0_u7684_u6D41_u7A0B" class="headerlink" title="3.    从0到发布此文章的流程"></a>3.    从0到发布此文章的流程</h1><h2 id="3-1__u786E_u5B9A_u8981_u5199_u535A_u5BA2_u53D1_u5E03_u5230_u54EA_u91CC_u3002"><a href="#3-1__u786E_u5B9A_u8981_u5199_u535A_u5BA2_u53D1_u5E03_u5230_u54EA_u91CC_u3002" class="headerlink" title="3.1    确定要写博客发布到哪里。"></a>3.1    确定要写博客发布到哪里。</h2><p>小编目前发布到<a href="https://github.com/" target="_blank" rel="external">Github</a> ,并用<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>关联Github</p>
<h2 id="3-2__u642D_u5EFA_u76F8_u5173_u73AF_u5883_u3002"><a href="#3-2__u642D_u5EFA_u76F8_u5173_u73AF_u5883_u3002" class="headerlink" title="3.2    搭建相关环境。"></a>3.2    搭建相关环境。</h2><p>小编是在Mac系统下搭建Hexo的环境，流程如下：    </p>
<ul>
<li>在安装了<a href="https://developer.apple.com/cn/xcode/downloads/" target="_blank" rel="external">Xcode</a>（连带安装git）的情况下，<br>进行下面工具的安装，否则要另外安装git工具。    </li>
<li>下载安装<a href="https://nodejs.org" target="_blank" rel="external">Node.js</a>，Node.js的安装连带npm（包管理工具Node Package<br>Magager）工具一起安装。    </li>
<li>用npm安装Hexo。</li>
</ul>
<h2 id="3-3__u6CE8_u518CGithub_u8D26_u6237_uFF0C_u5E76_u751F_u6210_u81EA_u5DF1_u7684_u4ED3_u5E93_u3002"><a href="#3-3__u6CE8_u518CGithub_u8D26_u6237_uFF0C_u5E76_u751F_u6210_u81EA_u5DF1_u7684_u4ED3_u5E93_u3002" class="headerlink" title="3.3    注册Github账户，并生成自己的仓库。"></a>3.3    注册Github账户，并生成自己的仓库。</h2><h2 id="3-4__u4FEE_u6539_u811A_u672C_u6587_u4EF6_uFF0C_u5173_u8054Github_u4ED3_u5E93_u548CHexo_u7684_u535A_u5BA2_u3002"><a href="#3-4__u4FEE_u6539_u811A_u672C_u6587_u4EF6_uFF0C_u5173_u8054Github_u4ED3_u5E93_u548CHexo_u7684_u535A_u5BA2_u3002" class="headerlink" title="3.4    修改脚本文件，关联Github仓库和Hexo的博客。"></a>3.4    修改脚本文件，关联Github仓库和Hexo的博客。</h2><h2 id="3-5__u4E86_u89E3Markdown_u548C_u5B66_u4E60_u5176_u8BED_u6CD5_u3002"><a href="#3-5__u4E86_u89E3Markdown_u548C_u5B66_u4E60_u5176_u8BED_u6CD5_u3002" class="headerlink" title="3.5    了解Markdown和学习其语法。"></a>3.5    了解Markdown和学习其语法。</h2><p>有兴趣的话，大家还可以学下超文本标记语言HTML，后面编写起来能更容易。</p>
<h2 id="3-6__u5B89_u88C5_u535A_u5BA2_u7F16_u5199_u8F6F_u4EF6Markdown_Editor_u3002"><a href="#3-6__u5B89_u88C5_u535A_u5BA2_u7F16_u5199_u8F6F_u4EF6Markdown_Editor_u3002" class="headerlink" title="3.6    安装博客编写软件Markdown Editor。"></a>3.6    安装博客编写软件Markdown Editor。</h2><p>搜集相关软件，选出自己喜欢的类型来安装。有在线编辑和客户端编辑，小编安装了<br>客户端的<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>，<a href="http://soft.xiaoshujiang.com/" target="_blank" rel="external">小书匠</a>和<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd Markdown</a>。</p>
<h2 id="3-7__u7F16_u5199_u535A_u5BA2_u6587_u7AE0_u3002"><a href="#3-7__u7F16_u5199_u535A_u5BA2_u6587_u7AE0_u3002" class="headerlink" title="3.7    编写博客文章。"></a>3.7    编写博客文章。</h2><p>边查看Markdown语法边写博客，对照编辑模式和实际效果。</p>
<h2 id="3-8__u53D1_u5E03_u6587_u7AE0"><a href="#3-8__u53D1_u5E03_u6587_u7AE0" class="headerlink" title="3.8    发布文章"></a>3.8    发布文章</h2><p>生成Markdown格式的文件，替换Hexo new生成的文件，重新生成并发布。到博客查看效果，不合意<br>的话修改并重新生成和发布。</p>
<p>接下来将介绍的是 <a href="http://dabinge.github.io/2016/02/25/Mac%E4%B8%8BHexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">Mac下Hexo环境搭建</a>。</p>
<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
<p>转自大彬的 <a href="http://dabinge.github.io/2016/02/04/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E6%80%BB%E6%8B%AC/" target="_blank" rel="external">技术博客编写总括</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="1-__u524D_u8A00"><a href="#1-__u524D_u8A00" class="headerlink" title="1.    前言"></a>1.    前言</h1><p>本文主要介绍技术博客从开始到完成编写第一篇技术博客—-也就是此博]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
