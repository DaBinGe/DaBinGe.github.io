<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[大彬]]></title>
  <subtitle><![CDATA[做什么都一样，用心去做都可以做好。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-23T01:55:28.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[大彬]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[数据结构-单链表基本操作-C语言]]></title>
    <link href="http://yoursite.com/2016/03/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/03/22/数据结构-单链表基本操作/</id>
    <published>2016-03-22T09:36:13.000Z</published>
    <updated>2016-03-23T01:55:28.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/DaBinGe/SingleLinkedList_C" target="_blank" rel="external">Download the source codes on Github.</a>   </p>
<h1 id="1-_IDE"><a href="#1-_IDE" class="headerlink" title="1.    IDE"></a>1.    IDE</h1><p>Mac OS EI Capitan 10.11.3,Xcode 7.2 (7C68),Mou 0.8.7</p>
<h1 id="2-_Abstrat"><a href="#2-_Abstrat" class="headerlink" title="2.    Abstrat"></a>2.    Abstrat</h1><p>The basic operations of single linked list in C langeage below:<br>本文主要讲单链表以下这些基本操作：</p>
<ul>
<li>Create  创建</li>
<li>Query   查询</li>
<li>Add     添加</li>
<li>Modify  修改</li>
<li>Sort    排序</li>
<li>Delete  删除</li>
<li>Ergodic    遍历</li>
<li>Other    其它</li>
</ul>
<p>Previously,it is best for you to learn the <strong>typedef struct</strong> syntax first if you have not learned<br>or forget  its usage.<br>如果你没有学过结构体定义的语法或记不清，请先学习它的用法。<br><a href="http://blog.csdn.net/haiou0/article/details/6877718" target="_blank" rel="external">结构体定义：struct与typedef struct 用法详解和用法小结</a><br><a href="http://blog.sina.com.cn/s/blog_4fdabc820100fsxu.html" target="_blank" rel="external">结构体定义 typedef struct 用法详解和用法小结</a></p>
<h1 id="3-_Basic_operations"><a href="#3-_Basic_operations" class="headerlink" title="3.    Basic operations"></a>3.    Basic operations</h1><h2 id="3-1_Create"><a href="#3-1_Create" class="headerlink" title="3.1    Create"></a>3.1    Create</h2><ul>
<li>Create a link with data [0…7] automatically.<br>自动创建结点数据从0到7的单链表。</li>
</ul>
<pre><code>LinkedList_Long createLinked() {
    LinkedList_Long head = createHeadNode();
    if (head == NULL) {
        return NULL;
    }
    LongNodeData amount = 0;
    LinkedList_Long pLast = NULL;
    for (LongNodeData index = 0; index &lt; 8; index++) {
        LinkedList_Long pNext = createHeadNode();
        if (pNext == NULL) {
            return head;
        }
        if (!index) {//append the first node to header
            pLast = pNext;
            head-&gt;next = pLast;

        }else {//appending the node to last node
            pLast-&gt;next = pNext;
            pLast = pNext;
        }
        pNext-&gt;data = index;
        amount++;
    }
    head-&gt;data = amount;

    return head;
}
</code></pre><ul>
<li>Create link and receive user’s input continously unless entering the exitData to stop.<br>创建链表并连续接收用户输入的数据，输入指定的数据来结束此次创建。</li>
</ul>
<pre><code>LinkedList_Long createLinkedListWithExitData(LongNodeData exitData,bool isAtHeader) {
    LinkedList_Long head = createHeadNode();
    if (head == NULL) {
        return NULL;
    }
    LongNodeData amount = 0;
    LinkedList_Long pLast = isAtHeader ? NULL : head;

    while (1) {
        LinkedList_Long pNext = createHeadNode();
        if (pNext == NULL) {
            break;
        }
        printf(&quot;Enter an integer data,enter %lld to exit the creating.\n&quot;,exitData);
        scanf(&quot;%lld&quot;,&amp;pNext-&gt;data);
        if (pNext-&gt;data == exitData) {
            break;
        }
        if (isAtHeader) {//add to header
            if (amount != 0) {//is not the first node
                pNext-&gt;next = pLast;
            }
        }else {//add to tail
            pLast-&gt;next = pNext;
        }
        pLast = pNext;
        amount++;
    }
    head-&gt;data = amount;
    if (isAtHeader) {
        head-&gt;next = pLast;
    }
    return head;
}
</code></pre><h2 id="3-2_Query"><a href="#3-2_Query" class="headerlink" title="3.2    Query"></a>3.2    Query</h2><ul>
<li>Query the node at index of the link.<br>根据索引获取结点。</li>
</ul>
<pre><code>LinkedList_Long nodeAtIndex(LinkedList_Long head,LongNodeData index) {
    if (head == NULL) {
        return NULL;
    }
    if (index &lt; 0) {
        printf(&quot;Please enter an non-negative integer.\n&quot;);
        return NULL;
    }
    if (index &gt;= head-&gt;data) {
        printf(&quot;The index %lld beyond bounds [0...%lld],and \n&quot;
               &quot;please be sure the index is counted from 0.\n&quot;,index,head-&gt;data - 1);
        return NULL;
    }

    LinkedList_Long pNext = head-&gt;next;
    LongNodeData num = 0;
    while (pNext &amp;&amp; num &lt; index) {
        pNext = pNext-&gt;next;
        num++;
    }
    return pNext;
}
</code></pre><ul>
<li>Query the lastest node of the link.<br>获取链表最后一个结点。</li>
</ul>
<pre><code>LinkedList_Long lastNodeOfLinkedList(LinkedList_Long head) {
    if (head == NULL) {
        return NULL;
    }
    LinkedList_Long pNext = head-&gt;next;
    if (pNext == NULL) {
        return NULL;
    }
    while (pNext-&gt;next) {
        pNext = pNext-&gt;next;
    }
    return pNext;
}
</code></pre><h2 id="3-3_Insert"><a href="#3-3_Insert" class="headerlink" title="3.3    Insert"></a>3.3    Insert</h2><ul>
<li>Insert a new node,inputed by user instantly, at index of the link.<br>在指定索引插入节点</li>
</ul>
<pre><code>LinkedList_Long insertOneNodeAtIndex(LinkedList_Long head) {
    if (head == NULL) {
        printf(&quot;Insert failed,as the linked list is NULL.&quot;);
        return head;
    }
    LinkedList_Long node = createHeadNode();
    if (node == NULL) {
        printf(&quot;Insert failed for the sake of memory error.\n&quot;);
        return head;
    }
    LongNodeData index = 0;
    printf(&quot;Enter the index,a non-negative integer,as the insert location.\n&quot;);
    scanf(&quot;%lld&quot;,&amp;index);
    while (!isIndexInsideLinkedList(index, head)) {
        printf(&quot;please enter agan.\n&quot;);
        index = 0;
        scanf(&quot;%lld&quot;,&amp;index);
    }
    printf(&quot;please enter the data.\n&quot;);
    scanf(&quot;%lld&quot;,&amp;node-&gt;data);

    if (index &lt; 0) {
        index = 0;
    }
    return insertNodeIntoListAtIndex(head, node, index);
}
</code></pre><ul>
<li>Insert the node into the link at index of the link.<br>插入一个结点到链表的指定索引</li>
</ul>
<pre><code>LinkedList_Long insertNodeIntoListAtIndex(LinkedList_Long head,LinkedList_Long node,LongNodeData index) {
    if (head == NULL) {
        return NULL;
    }
    if (node == NULL) {
        printf(&quot;Insert failed,because the node is NULL.\n&quot;);
        return head;
    }
    if ((*head).next == NULL) {//node count is 0
        (*head).next = node;
        return head;
    }
    if (index &gt; (*head).data - 1) {
        LinkedList_Long tailNode = lastNodeOfLinkedList(head);
        (*tailNode).next = node;

    }else {
        if (index == 0) {
            (*node).next = (*head).next;
            (*head).next = node;
        }else {
            LinkedList_Long lastNode = nodeAtIndex(head, index - 1);
            if (lastNode == NULL) {
                printf(&quot;Got node at index failed!\n&quot;);
                return head;
            }
            (*node).next = (*lastNode).next;
            (*lastNode).next = node;
        }
    }

    return head;
}
</code></pre><h2 id="3-4_Modify"><a href="#3-4_Modify" class="headerlink" title="3.4    Modify"></a>3.4    Modify</h2><ul>
<li>Exchage two data of two nodes.<br>交换两个结点的数据。</li>
</ul>
<pre><code>void exchangeTwoNodeData(LinkedList_Long nodeLeft,LinkedList_Long nodeRight) {
    LongNodeData data = nodeLeft-&gt;data;
    nodeLeft-&gt;data = nodeRight-&gt;data;
    nodeRight-&gt;data = data;
}
</code></pre><ul>
<li>Exchage two nodes’ data of the link in the two indexs.<br>通过索引交换两个结点。</li>
</ul>
<pre><code>LinkedList_Long exchageTwoNode (LinkedList_Long head,LongNodeData indexLeft,LongNodeData indexRight) {
    if (head == NULL) {
        printf(&quot;Exchaged failed.The linkedList is NULL\n&quot;);
        return head;
    }
    if (head-&gt;data &lt; 1) {
        printf(&quot;Exchaged failed.The linkedList has nodes less than 2.\n&quot;);
        return head;
    }
    if (indexRight == indexLeft) {
        return head;
    }
    if (!isIndexInsideLinkedList(indexLeft, head) || !isIndexInsideLinkedList(indexRight, head)) {
        return head;
    }

    printf(&quot;Begin exchaging two node.\n&quot;);
    LinkedList_Long nodeLeft = nodeAtIndex(head, indexLeft);
    LinkedList_Long nodeRight = nodeAtIndex(head, indexRight);
    exchangeTwoNodeData(nodeLeft, nodeRight);
    return head;
}
</code></pre><ul>
<li>Revert the link by operating its datas.<br>链表逆置。</li>
</ul>
<pre><code>void revertLinkedList (LinkedList_Long head) {
    if (head == NULL) {
        printf(&quot;Revert failed,the linkedList is NULL.\n&quot;);
        return;
    }
    LongNodeData count = head-&gt;data - 1;
    if (count &lt; 2) {
        return;
    }
    for (LongNodeData index = 0; index &lt; count; index++,count--) {
        exchageTwoNode(head, index, count);
    }
}
</code></pre><h2 id="3-5_Sort"><a href="#3-5_Sort" class="headerlink" title="3.5    Sort"></a>3.5    Sort</h2><p>Sort the link with two ways,by operating the node count or node pointer.<br>通过操作链表结点个数或者结点指针对链表进行排序。</p>
<pre><code>LinkedList_Long sortLinkedList(LinkedList_Long head,bool accending) {
    //mode 1,using node count
    if (head-&gt;data &lt; 1) {
        return head;
    }
    LinkedList_Long node = head-&gt;next;
    for (LongNodeData row = 0; row &lt; head-&gt;data - 1; row++) {
        LinkedList_Long pNext = node-&gt;next;
        if (pNext == NULL || node == NULL) {
            break;
        }
        for (LongNodeData coloum = 0; coloum &lt; head-&gt;data; coloum++) {
            if (accending) {
                if (node-&gt;data &gt; pNext-&gt;data) {
                    exchangeTwoNodeData(node, pNext);
                }
            }else {
                if (node-&gt;data &lt; pNext-&gt;data) {
                    exchangeTwoNodeData(node, pNext);
                }
            }
            pNext = pNext-&gt;next;
            if (pNext == NULL) {
                break;
            }
        }
        node = node-&gt;next;
    }

    return head;

    //mode 2,using pointer
    if (head-&gt;next == NULL) {
        return head;
    }
    LinkedList_Long qNode = head-&gt;next;
    while (qNode) {
        LinkedList_Long qNext = qNode-&gt;next;
        while (qNext) {
            if (accending) {
                if (qNode-&gt;data &gt; qNext-&gt;data) {
                    exchangeTwoNodeData(qNode, qNext);
                }
            }else {
                if (qNode-&gt;data &lt; qNext-&gt;data) {
                    exchangeTwoNodeData(qNode, qNext);
                }
            }
            qNext = qNext-&gt;next;
        }
        qNode = qNode-&gt;next;
    }
    return head;
}
</code></pre><h2 id="3-6_Delete"><a href="#3-6_Delete" class="headerlink" title="3.6    Delete"></a>3.6    Delete</h2><ul>
<li>Delete one node at the index of the link.<br>删除一个指定索引的结点。</li>
</ul>
<pre><code>LinkedList_Long deleteNodeAtIndex (LinkedList_Long head,LongNodeData index) {
    if (head == NULL) {
        printf(&quot;Delete failed,the linked list is NULL.\n&quot;);
        return head;
    }
    if (head-&gt;next == NULL) {
        printf(&quot;Delete failed,the linked list&#39;s node count is 0.\n&quot;);
        return head;
    }
    if (index &gt;= head-&gt;data) {
        printf(&quot;Delete failed,index %lld beyond bounds [0...%lld].\n&quot;,index,head-&gt;data);
        return head;
    }
    if (index == 0) {
        LinkedList_Long node = nodeAtIndex(head, 0);
        head-&gt;next = node-&gt;next;
        node-&gt;next = NULL;
        free(node);

    }else {
        LinkedList_Long node = nodeAtIndex(head, index - 1);
        LinkedList_Long nodeDelete = node-&gt;next;
        node-&gt;next = nodeDelete-&gt;next;
        nodeDelete = NULL;
        free(nodeDelete);

    }
    head-&gt;data--;
    return head;
}
</code></pre><ul>
<li>Delete the whole link and release the memory,release the header node if neccessary.<br>整个链表删除及释放内存，有需要可把头结点也删除。</li>
</ul>
<pre><code>LinkedList_Long deleteLinkedList (LinkedList_Long head) {
    if (head == NULL) {
        printf(&quot;The linkedList is NULL.\n&quot;);
        return NULL;
    }
    LinkedList_Long list = head-&gt;next;
    if (list == NULL) {
        printf(&quot;The LinkedList has no node.\n&quot;);
        return head;
    }
    LongNodeData index = 0;
    while (list) {
        LinkedList_Long node = list;
        list = list-&gt;next;
        printf(&quot;delete node %lld at index %lld.\n&quot;,node-&gt;data,index++);
        node-&gt;next = NULL;
        node = NULL;
        free(node);
        head-&gt;data--;
    }
    head-&gt;next = NULL;
    free(head-&gt;next);

    return head;
}
</code></pre><h2 id="3-7_Ergodic"><a href="#3-7_Ergodic" class="headerlink" title="3.7    Ergodic"></a>3.7    Ergodic</h2><ul>
<li>Print the node’s data.<br>打印指定结点的数据。</li>
</ul>
<pre><code>void printLinkedNode(LinkedList_Long headNode) {
    if (headNode == NULL) {
        printf(&quot;The node is NULL.\n&quot;);
        return;
    }
    printf(&quot;The node data is %lld.\n&quot;,headNode-&gt;data);
}
</code></pre><ul>
<li>Print the whole link’s data.<br>打印链表的所有数据。</li>
</ul>
<pre><code>void printLinkedList(LinkedList_Long headNode) {
    LinkedList_Long pNext = headNode-&gt;next;
    printf(&quot;The linked list has %lld nodes,it is : \n&quot;,headNode-&gt;data);

    while (pNext != NULL) {
        printf(&quot;%lld, &quot;,pNext-&gt;data);
        pNext = pNext-&gt;next;
    }
    printf(&quot;\n&quot;);
}
</code></pre><h2 id="3-8_Other"><a href="#3-8_Other" class="headerlink" title="3.8    Other"></a>3.8    Other</h2><ul>
<li>Judging the index is beyond the link or not.<br>判断索引是否超出链表范围。</li>
</ul>
<pre><code>bool isIndexInsideLinkedList(LongNodeData index,LinkedList_Long head) {
    if (index &gt;= head-&gt;data) {
        printf(&quot;Index %lld beyond bounds [0...%lld].\n&quot;,index,head-&gt;data - 1);
        return 0;
    }
    return 1;
}
</code></pre><h1 id="4-_Test_guide"><a href="#4-_Test_guide" class="headerlink" title="4.    Test guide"></a>4.    Test guide</h1><p>Testing the create function following is primary.The other create functions is similar.<br>首先测试下面创建链表的方法，其它创建链表的方法也类似。</p>
<pre><code>    LinkedList_Long head = createLinked();
    printLinkedList(head);
</code></pre><p>Other testing is the same as the following sort test function.<br>其它函数的测试也和下面排序的函数一样。</p>
<pre><code>    LinkedList_Long head = createLinked();
    printLinkedList(head);
    head = sortLinkedList(head, 1);
    printf(&quot;*******  Sort results  *****\n&quot;);
    printLinkedList(head);
</code></pre><p>Copyright reserved,reprinted from dabin’s <a href="https://dabinge.github.io/2016/03/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/" target="_blank" rel="external">Data structure - Single linked list’s basic operations - C langeage</a>.<br>转载请标明出处，转自大彬的 <a href="https://dabinge.github.io/2016/03/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/" target="_blank" rel="external">数据结构-单链表基本操作-C语言</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/DaBinGe/SingleLinkedList_C" target="_blank" rel="external">Download the source codes on Github.</a>   </p>
<h]]>
    </summary>
    
      <category term="数据结构 C语言" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发 Touch ID 系统功能之指纹识别]]></title>
    <link href="http://yoursite.com/2016/03/18/iOS%E5%BC%80%E5%8F%91-Touch-ID-%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E4%B9%8B%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2016/03/18/iOS开发-Touch-ID-系统功能之指纹识别/</id>
    <published>2016-03-18T07:35:07.000Z</published>
    <updated>2016-03-18T10:07:38.000Z</updated>
    <content type="html"><![CDATA[<p><strong>编写本博客相关环境：Mac OS 10.11.3，Mou 0.8.7，Xcode 7.2 (7C68)，iOS 9.2</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
<h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><p>This blog will simply shows the basic usage of <strong>Touch ID</strong>,one of the device’s system<br>common fuctions,in both Objective C code and Swift code.<br>本文将通过 ObjC 和 Swift 分别介绍常用的系统功能–<strong>Touch ID指纹识别</strong>的基本使用。</p>
<p>Touch ID is one of the new features of iOS 8.0 version.So the device’s operation<br> system version must be equal or greater than 8.0 .And,the iOS Simulators are unavalable.<br>Touch ID指纹识别是iOS 8.0的新特性，所以设备的系统版本必须大于等于8.0.而且不能在模拟器上使用该功能。</p>
<h2 id="ObjC_Codes"><a href="#ObjC_Codes" class="headerlink" title="ObjC Codes"></a>ObjC Codes</h2><pre><code>#import &lt;LocalAuthentication/LocalAuthentication.h&gt;
</code></pre><pre><code>- (void)authenticateUser {
    if ([[[UIDevice currentDevice]systemVersion] floatValue] &lt; 8.0) {
        //point out that Touch ID in current device&#39;s OS is unavalable.

        return;
    }
    LAContext *context = [[LAContext alloc]init];
    NSError *error = nil;
    NSString *message = @&quot;通过验证指纹解锁&quot;;

    if ([context canEvaluatePolicy:
         LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error]) {//touch id可用
        [context evaluatePolicy:
         LAPolicyDeviceOwnerAuthenticationWithBiometrics
                localizedReason:message
                          reply:^(BOOL success, NSError * _Nullable error) {
            if (success) {
                NSLog(@&quot;验证成功&quot;);
            }else {//验证出错
                [self authenicateErrorWithCode:error.code];
            }
        }];
    }else {
        [self authenicateUnavalableWithCode:error.code];
    }

}
</code></pre><p>Error code enumeration below.Because of the limit of all versions and sizes of<br>devices,a few errors are not tested.<br>以下是异常情况枚举。由于没有各版本各型号的设备，所以有少部分错误类型没有被验证。</p>
<pre><code>- (void)authenicateErrorWithCode:(NSInteger)code {//识别指纹错误
    switch (code) {
        case LAErrorSystemCancel:
        {
            NSLog(@&quot;系统取消验证,如用户切换到其它app&quot;);
        }
            break;
            case LAErrorUserCancel:
        {
            NSLog(@&quot;用户取消验证&quot;);
        }
            break;
            case LAErrorUserFallback:
        {
            NSLog(@&quot;用户选择输入密码&quot;);
        }
            break;
        case LAErrorTouchIDLockout://&gt;=ios 9.0
        {
            NSLog(@&quot;用户多次验证指纹被锁，要求用密码解锁touch id&quot;);
        }
            break;
            case LAErrorAppCancel:
        {
            NSLog(@&quot;被其它更高优先级的app取消，如来电&quot;);
        }
            break;
        case LAErrorInvalidContext:
        {
            NSLog(@&quot;LAContext对象被从内存中释放了&quot;);
        }
            break;
        default:
            [self authenicateUnavalableWithCode:code];
            break;
    }
}

- (void)authenicateUnavalableWithCode:(NSInteger)code {//授权错误
    switch (code) {
        case LAErrorAuthenticationFailed://ios8.0
        {
            NSLog(@&quot;用户未提供有效的验证，如用户多次验证指纹被锁，要求用密码解锁touch id&quot;);
        }
            break;
        case LAErrorTouchIDNotAvailable:
        {
            NSLog(@&quot;touch id 不可用，设备不支持&quot;);
        }
            break;
        case LAErrorTouchIDNotEnrolled:
        {
            NSLog(@&quot;用户未录入指纹&quot;);
        }
            break;
        case LAErrorPasscodeNotSet:
        {
            NSLog(@&quot;未设置密码&quot;);
        }
            break;
        default:
            break;
    }
}
</code></pre><h2 id="Swift_Codes"><a href="#Swift_Codes" class="headerlink" title="Swift Codes"></a>Swift Codes</h2><pre><code>import LocalAuthentication
</code></pre><pre><code>    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated);
        if Float(UIDevice.currentDevice().systemVersion) &gt; 8.0 {            
            self.authenticateUser()
        }
    }


    func authenticateUser() {
        let authenticateContext : LAContext = LAContext()
//        var authenticateContext : LAContext = LAContext()
        var error : NSError?
        if authenticateContext.canEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, error: &amp;error) {
            [authenticateContext.evaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics,
                localizedReason: &quot;通过验证home键指纹解锁&quot;,
                reply: { (succeed : Bool, evaluatePolicyError : NSError?) -&gt; Void in
                if succeed {
                    print(&quot;验证成功&quot;)//println(&quot;&quot;)在swift2.0已禁用
                }else {
                    self.evaluateErrorWithCode(evaluatePolicyError!.code)
                }
            })]
        }else {
            self.evaluateErrorWithCode(error!.code)
        }
    }
</code></pre><pre><code>    func evaluateErrorWithCode(code : Int) {
        switch code {
        case LAError.AuthenticationFailed.rawValue:
            print(&quot;AuthenticationFailed&quot;)
        case LAError.UserCancel.rawValue:
            print(&quot;UserCancel&quot;)
        case LAError.UserFallback.rawValue:
            print(&quot;User Fallback&quot;)
        case LAError.SystemCancel.rawValue:
            print(&quot;System Cancel&quot;)
        case LAError.PasscodeNotSet.rawValue:
            print(&quot;Passcode Not Set&quot;)
        case LAError.TouchIDNotAvailable.rawValue:
            print(&quot;TouchID Not Available&quot;)
        case LAError.TouchIDNotEnrolled.rawValue:
            print(&quot;TouchID Not Enrolled&quot;)

//        case LAError.TouchIDLockout.rowValue:
//            print(&quot;&quot;);
        default:
            print(&quot;TouchID Lockout or AppCancel or Invalid Context&quot;)
        }

    }
</code></pre><p>This is my first Swift Demo.The following reference documents should be learn for the<br>newbie in this demo.</p>
<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html" target="_blank" rel="external">Swift Official Documentation</a>，the primary learning of writing “<strong>func</strong>“.    </p>
<p><a href="http://www.zgxue.com/167/1679428.html" target="_blank" rel="external">Swift 数据类型转换</a>    </p>
<p><a href="http://www.tuicool.com/articles/uUvYjar" target="_blank" rel="external">Difference between var and let</a>    </p>
<p><a href="http://blog.csdn.net/zhangao0086/article/details/38667315" target="_blank" rel="external">Swift switch usage</a></p>
<p><a href="http://c.biancheng.net/cpp/html/2426.html" target="_blank" rel="external">Swift enum</a></p>
<p><a href="http://blog.csdn.net/super_lee2013/article/details/47626427" target="_blank" rel="external">Differance between rawValue and hashValue</a>    </p>
<p>转自大彬的 <a href="http://dabinge.github.io/2016/03/18/iOS%E5%BC%80%E5%8F%91-Touch-ID-%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E4%B9%8B%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/" target="_blank" rel="external">iOS开发 Touch ID 系统功能之指纹识别</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>编写本博客相关环境：Mac OS 10.11.3，Mou 0.8.7，Xcode 7.2 (7C68)，iOS 9.2</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" targe]]>
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发 输入字数计算、限制]]></title>
    <link href="http://yoursite.com/2016/03/18/iOS%E5%BC%80%E5%8F%91-%E8%BE%93%E5%85%A5%E5%AD%97%E6%95%B0%E8%AE%A1%E7%AE%97%E3%80%81%E9%99%90%E5%88%B6/"/>
    <id>http://yoursite.com/2016/03/18/iOS开发-输入字数计算、限制/</id>
    <published>2016-03-18T01:24:01.000Z</published>
    <updated>2016-03-18T06:43:12.000Z</updated>
    <content type="html"><![CDATA[<p><strong>编写本博客相关环境：Mac OS 10.11.3，Mou 0.8.7，Xcode 7.2 (7C68)，iOS 9.2</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This is a introduction of caculating or limiting text <strong>word counts</strong>.<br>The text is divided into <em>DBC case charaters</em> and <em>SBC case charaters</em>.<br>本文介绍<em>全角字符</em>和<em>忽略全角字符</em>的文本字数统计或限制。</p>
<h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><ul>
<li><p>Editting in UITextField,these codes should be use for the protocol method<br>“- (BOOL)textField:(UITextField <em>)textField shouldChangeCharactersInRange:<br>(NSRange)range replacementString:(NSString </em>)string”,while UITextView is<br>“- (BOOL)textView:(UITextView <em>)textView shouldChangeTextInRange:(NSRange)range<br>replacementText:(NSString </em>)text”.    </p>
</li>
<li><p>在UITextField和UITextView编辑时，以下代码分别用在其”输入许可”的代理方法shouldChangeCharactersInRange<br>和shouldChangeTextInRange中。</p>
</li>
</ul>
<h1 id="DBC_case__28Half-width_29_characters"><a href="#DBC_case__28Half-width_29_characters" class="headerlink" title="DBC case (Half-width) characters"></a>DBC case (Half-width) characters</h1><ul>
<li>Considering NSString objctive’s length,such as string.length, as word counts.<br>不考虑全角字符</li>
</ul>
<pre><code>    if (range.location &gt;= wordCount &amp;&amp; string.length) {
        return NO;
    }else if (string.length + range.location &gt; wordCount) {
        textField.text = [textField.text stringByAppendingString:[string substringToIndex:wordCount - range.location]];
        return NO;
    }
    return YES;
</code></pre><h1 id="SBC_case__28Full-width_29_charaters"><a href="#SBC_case__28Full-width_29_charaters" class="headerlink" title="SBC case (Full-width) charaters"></a>SBC case (Full-width) charaters</h1><ul>
<li>A Full-width charater is counted two byte,a Half-width charater is counted one<br>byte.<br>区分全角、半角计算文本字数。<br>The limitCount is a const integer value which is the max count that user can input.<br>limitCount是允许用户输入的最大字数。</li>
</ul>
<pre><code>    if (!text.length) {//backspace
        return YES;
    }
    int count = [ToolObjc wordCountWithText:[textView.text stringByAppendingString:text]];//charater counts
    if (count &gt;= limitCount) {
        count = limitCount - [ToolObjc wordCountWithText:textView.text];//The remaining words
        textView.text = [textView.text stringByAppendingString:[text substringToIndex:count / 2]];
        _lbCount.text = @&quot;0&quot;;
        return NO;
    }
    return YES;
</code></pre><ul>
<li>Another way below is caculating for the Full-width charaters count:<br>下面的方法是计算包含全角字符的文本字数：</li>
</ul>
<pre><code>#import &quot;RegexKitLite.h&quot;
</code></pre><pre><code>- (int)calcStrWordCount:(NSString *)str {
    int nResult = 0;
    NSString *strSourceCpy = [str copy];
    NSMutableString *strCopy =[[NSMutableString alloc] initWithString: strSourceCpy];
    NSArray *array = [strCopy componentsMatchedByRegex:@&quot;((news|telnet|nttp|file|http|ftp|https)://){1}&quot;
    &quot;(([-A-Za-z0-9]+(\\.[-A-Za-z0-9]+)*(\\.[-A-Za-z]{2,5}))|([0-9]{1,3}(\\.[0-9]{1,3}){3}))(:[0-9]*)&quot;
    &quot;?(/[-A-Za-z0-9_\\$\\.\\+\\!\\*\\(\\),;:@&amp;=\\?/~\\#\\%]*)*&quot;];
    if ([array count] &gt; 0) {
        for (NSString *itemInfo in array) {
            NSRange searchRange = {0};
            searchRange.location = 0;
            searchRange.length = [strCopy length];
            [strCopy replaceOccurrencesOfString:itemInfo withString:@&quot; &quot; options:NSCaseInsensitiveSearch range:searchRange];
        }
    }

    char *pchSource = (char *)[strCopy cStringUsingEncoding:NSUTF8StringEncoding];
    int sourcelen = strlen(pchSource);

    int nCurNum = 0; //current word count
    for (int n = 0; n &lt; sourcelen; ) {
        if( *pchSource &amp; 0x80 ) {
            pchSource += 3; // NSUTF8StringEncoding encoding Chinese words is counted as 3 bytes
            n += 3;
            nCurNum += 2;
        }
        else {
            pchSource++;
            n += 1;
            nCurNum += 1;
        }
    }
    //the last word that insuffices one is calculated for one
    nResult = nCurNum / 2 + nCurNum % 2;  

    [strSourceCpy release];
    [strCopy release];
    return nResult;
}
</code></pre><p>The limit word count codes above compatible with users’ <strong>paste</strong> action.<br>以上限制字数代码在用户粘贴时也有效。</p>
<p>转自大彬的 <a href="http://dabinge.github.io/2016/03/18/iOS%E5%BC%80%E5%8F%91-%E8%BE%93%E5%85%A5%E5%AD%97%E6%95%B0%E8%AE%A1%E7%AE%97%E3%80%81%E9%99%90%E5%88%B6/" target="_blank" rel="external">iOS开发 输入字数计算、限制</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>编写本博客相关环境：Mac OS 10.11.3，Mou 0.8.7，Xcode 7.2 (7C68)，iOS 9.2</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" targe]]>
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编写博客]]></title>
    <link href="http://yoursite.com/2016/02/26/%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/02/26/编写博客/</id>
    <published>2016-02-26T07:30:57.000Z</published>
    <updated>2016-02-26T10:03:00.000Z</updated>
    <content type="html"><![CDATA[<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>  新手编写博客，要先选择和安装好博客编写软件，还要学习编写相关的语法。<br>  软件主要介绍Markdown Editors，下面会列出给大家参考。<br>  平时浏览网页，相信大家也见过网页上有标题、链接、高亮、图片、表格和文本块等。要实现这些效果，<br>显然也要遵循一定的规则或者说是语法。而编写博客的语法可以用HTML，也可以用Markdown，或者<br>两种同时使用。</p>
<h1 id="Markdown_Editors"><a href="#Markdown_Editors" class="headerlink" title="Markdown Editors"></a>Markdown Editors</h1><h2 id="Mac_Markdown_u7F16_u8F91_u5668"><a href="#Mac_Markdown_u7F16_u8F91_u5668" class="headerlink" title="Mac Markdown编辑器"></a>Mac Markdown编辑器</h2><p>StackEdit、MDEditor、简书、马克飞象、Marxico是在线编辑器，其它是客户端<br>FarBox、Cmd Markdown、小书匠、Sublime Text和Atom 支持多平台</p>
<h3 id="Mac_u6536_u8D39_u8F6F_u4EF6"><a href="#Mac_u6536_u8D39_u8F6F_u4EF6" class="headerlink" title="Mac收费软件"></a>Mac收费软件</h3><ul>
<li><a href="https://maxiang.io/" target="_blank" rel="external">马克飞象 Maxiang</a>，10天试用</li>
<li><a href="https://bywordapp.com/" target="_blank" rel="external">Byword</a>，移动端和电脑端都可以使用</li>
<li><a href="https://ia.net/writer/ios" target="_blank" rel="external">iA Writer</a>，移动端和电脑端都可以使用</li>
<li><a href="http://www.ulyssesapp.com/" target="_blank" rel="external">Ulysses</a>，可用于Mac和iPad</li>
<li><a href="https://71squared.com/focused" target="_blank" rel="external">Typed</a></li>
</ul>
<h3 id="Mac_u514D_u8D39_u8F6F_u4EF6"><a href="#Mac_u514D_u8D39_u8F6F_u4EF6" class="headerlink" title="Mac免费软件"></a>Mac免费软件</h3><p>小编查找的时候，遇到要注册帐号的已经列出</p>
<ul>
<li><a href="https://stackedit.io/editor" target="_blank" rel="external">StackEdit</a></li>
<li><a href="http://dillinger.io/" target="_blank" rel="external">Dillinger</a></li>
<li><a href="http://www.marxi.co/" target="_blank" rel="external">Marxico</a>，要注册帐号</li>
<li><a href="https://coding.net/" target="_blank" rel="external">Coding</a>，要注册帐号</li>
<li><a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a>，要注册帐号</li>
<li><a href="http://mahua.jser.me/" target="_blank" rel="external">MaHua</a></li>
<li><a href="http://soft.xiaoshujiang.com/" target="_blank" rel="external">小书匠</a></li>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd MarkDown</a>，要注册帐号，部分语法只适合用在它的平台</li>
<li><a href="https://www.farbox.com/" target="_blank" rel="external">FarBox</a></li>
<li><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></li>
<li><a href="https://atom.io/" target="_blank" rel="external">Atom</a></li>
<li><a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>，小编使用的就是它</li>
<li><a href="http://www.typora.io/" target="_blank" rel="external">Typora</a></li>
<li><a href="http://macdown.uranusjr.com/" target="_blank" rel="external">MacDown</a></li>
<li><a href="http://pad.haroopress.com/user.html" target="_blank" rel="external">Haroopad</a></li>
<li><a href="http://jbt.github.io/markdown-editor/" target="_blank" rel="external">Markdown Editor</a>，很官方的名字，小伙伴们可以试用看看</li>
<li><a href="https://github.com/dragondjf/QMarkdowner" target="_blank" rel="external">QMarkDowner</a></li>
</ul>
<h3 id="Windows_u76F8_u5173_u8F6F_u4EF6"><a href="#Windows_u76F8_u5173_u8F6F_u4EF6" class="headerlink" title="Windows相关软件"></a>Windows相关软件</h3><ul>
<li><a href="http://www.markdownpad.com/" target="_blank" rel="external">MarkdownPad</a></li>
<li><a href="http://git.oschina.net/elerao/Smark" target="_blank" rel="external">Smark</a></li>
<li><a href="http://www.mdcharm.com/" target="_blank" rel="external">MdCharm</a></li>
<li><a href="http://www.appinn.com/miu-markdown-editor/" target="_blank" rel="external">Miu</a></li>
<li><a href="https://github.com/retext-project/retext" target="_blank" rel="external">ReText</a></li>
<li><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a></li>
<li><a href="http://epiceditor.com" target="_blank" rel="external">EpicEditor</a></li>
<li><a href="http://cloose.github.io/CuteMarkEd/#" target="_blank" rel="external">CuteMarkEd</a></li>
</ul>
<h2 id="u7F16_u8BD1_u5668_u8BC4_u4EF7_u53C2_u8003_u94FE_u63A5"><a href="#u7F16_u8BD1_u5668_u8BC4_u4EF7_u53C2_u8003_u94FE_u63A5" class="headerlink" title="编译器评价参考链接"></a>编译器评价参考链接</h2><ul>
<li><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="external">好用的markdown编辑器</a></li>
<li><a href="http://www.oschina.net/search?q=markdown&amp;scope=project&amp;fromerr=SBmNEkbX" target="_blank" rel="external">开源中国的markdown软件锦集</a></li>
<li><a href="http://www.zhihu.com/question/20004911" target="_blank" rel="external">Mac上有哪些对Markdown预览支持比较好用的应用</a></li>
<li><a href="http://www.zhihu.com/question/22700184" target="_blank" rel="external">Mac上最好的markdown文本编辑器是什么</a></li>
</ul>
<h1 id="Markdown_u8BED_u6CD5"><a href="#Markdown_u8BED_u6CD5" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><p>Markdown语法并不多，总共10来条，很容易掌握和上手，编写也能马上看到效果。<br>大家下载了Markdown编辑器在软件帮助也能找到Markdown语法说明，参考范例马上<br>着手写吧。<br>下面是语法说明参考文档：</p>
<ul>
<li><a href="https://www.wikimilk.org/markdown-guide/#help" target="_blank" rel="external">Markdown：指南</a></li>
<li><a href="https://www.wikimilk.org/markdown-syntax/" target="_blank" rel="external">Markdown：语法</a></li>
<li><a href="http://baike.baidu.com/link?url=VmJ2H4-nQ7QwGY9zpA6YEQQfxTIZT1IB59_td1cbvL0sT3gQEDRF1XRWfygtRddOy7XUXqFo91KT3BNv_bHHeq" target="_blank" rel="external">百度百科</a></li>
<li><a href="http://wowubuntu.com/markdown/#philosophy" target="_blank" rel="external">Markdown说明中文版</a></li>
<li><a href="https://gitcafe.com/riku/Markdown-Syntax-CN/raw/master/syntax.md" target="_blank" rel="external">Markdown说明中文版源码</a></li>
<li><a href="https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown" target="_blank" rel="external">Cmd markdown语法手册</a></li>
</ul>
<h1 id="u7F16_u5199_u6B65_u9AA4"><a href="#u7F16_u5199_u6B65_u9AA4" class="headerlink" title="编写步骤"></a>编写步骤</h1><ol>
<li><p>博客主目录下，终端新建一编博客</p>
<p>$ hexo new 博客名称</p>
</li>
<li><p>打开Finder，到博客主目录下的source-&gt;_posts下找到对应的“博客名称.md”文件</p>
</li>
<li>用安装好的Markdown编译器打开</li>
<li>参考语法编写内容</li>
<li>保存博客内容</li>
<li><p>终端更新所有内容到网络，包括刚刚编写的博客</p>
<p>$ hexo d -g</p>
</li>
<li><p>到博客（仓库）地址    查看效果，对不满意的更改再更新上去。</p>
</li>
</ol>
<p>博客编写介绍到此结束。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="e]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关联Github博客]]></title>
    <link href="http://yoursite.com/2016/02/26/%E5%85%B3%E8%81%94Github%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/02/26/关联Github博客/</id>
    <published>2016-02-26T03:08:33.000Z</published>
    <updated>2016-03-17T01:30:03.000Z</updated>
    <content type="html"><![CDATA[<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>上一编博客已经介绍了<a href="http://dabinge.github.io/2016/02/25/Mac%E4%B8%8BHexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">Mac下Hexo环境搭建</a>，相信大家已经可以看到自己的博客了。<br>但是博客地址是<a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a>，属于本地地址，还要开启服务“hexo server”<br>才能看。而现在有很多人把自己的博客关联到网上的一些平台，<a href="http://blog.sina.com.cn/" target="_blank" rel="external">比如新浪</a>，<a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a>，<br><a href="https://github.com" target="_blank" rel="external">Github</a>和<a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a>等。小编选择的是国际平台的Github，因为Github人气旺，上面<br>的资源比较优质，还考虑到后面要把自己写得好的源码上传到Github，所以选择它。  </p>
<h1 id="u521B_u5EFAGithub_u535A_u5BA2"><a href="#u521B_u5EFAGithub_u535A_u5BA2" class="headerlink" title="创建Github博客"></a>创建Github博客</h1><h2 id="u6CE8_u518CGithub_u5E10_u53F7"><a href="#u6CE8_u518CGithub_u5E10_u53F7" class="headerlink" title="注册Github帐号"></a>注册Github帐号</h2><p>没有Github帐号的小伙伴需要到<a href="https://github.com" target="_blank" rel="external">Github官网</a>上注册一个帐号。</p>
<h2 id="u521B_u5EFA_u4ED3_u5E93"><a href="#u521B_u5EFA_u4ED3_u5E93" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>登录Github后，到个人主页创建一个仓库，找不到入口的小伙伴可参考 <a href="http://jingyan.baidu.com/article/b907e627d3c1d546e7891ceb.html" target="_blank" rel="external">Github创建项目仓库百度经验</a>。</p>
<h2 id="u521B_u5EFAGithub_u535A_u5BA2-1"><a href="#u521B_u5EFAGithub_u535A_u5BA2-1" class="headerlink" title="创建Github博客"></a>创建Github博客</h2><p>Settings-&gt;Update your site-&gt;Auto matic page generator，然后选择主题发布。<br>后面Github博客关联到Hexo的博客后，将使用Hexo的主题，所以在这里可以不用纠结太久。<br>有需要的小伙伴可参考 <a href="http://jingyan.baidu.com/article/ed2a5d1f3732cb09f7be1745.html" target="_blank" rel="external">用Github pages创建自己的个人博客</a>。</p>
<h1 id="u5173_u8054Github_u535A_u5BA2_u548CHexo_u535A_u5BA2"><a href="#u5173_u8054Github_u535A_u5BA2_u548CHexo_u535A_u5BA2" class="headerlink" title="关联Github博客和Hexo博客"></a>关联Github博客和Hexo博客</h1><h2 id="u6B65_u9AA4"><a href="#u6B65_u9AA4" class="headerlink" title="步骤"></a>步骤</h2><p>让仓库地址 <a href="http://Github用户.github.io" target="_blank" rel="external">http://Github用户.github.io</a> 博客显示<a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a> 的博客。<br>到生成的博客主目录下，编辑_config.yml文件，拉到最下面，找到代码 #Deployment，<br>并修改如下：</p>
<pre><code># Deployment
## Docs: http://hexo.io/docs/deployment.html
deploy:
type: git
repository : https://github.com/Github用户（即使有大写也全要是小写）/Github用户（即使有大写也全要是小写）.github.io.git
branch : master
</code></pre><p>类型type后面在hexo 3.0之后要用git，而不是gitbub。</p>
<h2 id="u7EC8_u7AEF_u547D_u4EE4"><a href="#u7EC8_u7AEF_u547D_u4EE4" class="headerlink" title="终端命令"></a>终端命令</h2><pre><code>$ cd ~/Documents/hexo
$ vim _config.yml
</code></pre><p>输入小写字母i进入编辑状态，修改#Deployment下的代码。<br>改好#Deployment后，在英文键盘输入模式下，按Esc，输入冒号和wq保存并退出，如:wq</p>
<pre><code>$ hexo d -g
</code></pre><p>发布后到Github博客，也是仓库地址查看效果。<a href="http://Github用户（即使有大写也全要是小" target="_blank" rel="external">http://Github用户（即使有大写也全要是小</a><br>写）.github.io/ ，小编的是 <a href="http://dabinge.github.io/" target="_blank" rel="external">http://dabinge.github.io/</a> 。</p>
<p>至此，关联Github和hexo博客已经完成，下一篇介绍的是<a href="http://dabinge.github.io/2016/02/26/%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">编写博客</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="e]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/02/25/hello-world/"/>
    <id>http://yoursite.com/2016/02/25/hello-world/</id>
    <published>2016-02-25T10:13:48.000Z</published>
    <updated>2016-02-25T10:13:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5982_u679C_uFF0C_u4F60_u62B1_u6028_u73B0_u5728_u7684_u751F_u6D3B_u8FD9_u4E48_u8270_u8F9B_uFF01_u90A3_u4E48_uFF0C_u51E0_u5341_u5E74_u524D_u7684_u90A3_u573A_u6E38_u6CF3_u6BD4_u8D5B_uFF0C_u4F60_u5C31_u4E0D_u8BE5_u62FF_u7B2C_u4E00_uFF01"><a href="#u5982_u679C_uFF0C_u4F60_u62B1_u6028_u73B0_u5728_u7684_u751F_u6D3B_u8FD9_u4E48_u8270_u8F9B_uFF01_u90A3_u4E48_uFF0C_u51E0_u5341_u5E74_u524D_u7684_u90A3_u573A_u6E38_u6CF3_u6BD4_u8D5B_uFF0C_u4F60_u5C31_u4E0D_u8BE5_u62FF_u7B2C_u4E00_uFF01" class="headerlink" title="如果，你抱怨现在的生活这么艰辛！那么，几十年前的那场游泳比赛，你就不该拿第一！"></a>如果，你抱怨现在的生活这么艰辛！那么，几十年前的那场游泳比赛，你就不该拿第一！</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5982_u679C_uFF0C_u4F60_u62B1_u6028_u73B0_u5728_u7684_u751F_u6D3B_u8FD9_u4E48_u8270_u8F9B_uFF01_u90A3_u4E48_uFF0C_u51E0_u5341_u5E74_]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac下Hexo环境搭建]]></title>
    <link href="http://yoursite.com/2016/02/25/Mac%E4%B8%8BHexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/02/25/Mac下Hexo环境搭建/</id>
    <published>2016-02-25T08:15:11.000Z</published>
    <updated>2016-03-17T01:27:25.000Z</updated>
    <content type="html"><![CDATA[<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>本博客的内容基本都是终端操作，没有使用过终端或者较少使用的小伙伴可直接复制相关<br>命令。有需要的小伙伴可参考<a href="http://www.cnblogs.com/hjzhang/archive/2009/12/04/2043586.html/" target="_blank" rel="external">Unix终端常用命令</a>，<a href="http://itindex.net/detail/47206-mac-%E7%BB%88%E7%AB%AF-%E5%91%BD%E4%BB%A4" target="_blank" rel="external">mac终端命令大全介绍</a>。</p>
<h1 id="u642D_u5EFA_u6B65_u9AA4"><a href="#u642D_u5EFA_u6B65_u9AA4" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><p>注：小编在搭建之前已安装有Xcode 7.1，XCode 7.1已连带git一起安装，以下不对git的安装和<br>配置进行描述。有需要的小伙伴或参考<a href="http://git-scm.com/" target="_blank" rel="external">Git官网</a>，<a href="https://www.kernel.org/pub/software/scm/git/" target="_blank" rel="external">Git各版本下载</a>.</p>
<h2 id="u4E0B_u8F7DNode-js"><a href="#u4E0B_u8F7DNode-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h2><p>到<a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js下载官网</a>，选择Mac OS X Installer (.pkg)<br>并下载安装。Node.js的安装会把npm工具一起安装。小编安装的是Node.js v4.2.6 和 npm v2.14.12。</p>
<h2 id="u7EC8_u7AEF_u547D_u4EE4_u64CD_u4F5C"><a href="#u7EC8_u7AEF_u547D_u4EE4_u64CD_u4F5C" class="headerlink" title="终端命令操作"></a>终端命令操作</h2><h2 id="u6253_u5F00_u7EC8_u7AEF"><a href="#u6253_u5F00_u7EC8_u7AEF" class="headerlink" title="打开终端"></a>打开终端</h2><p>方法一：Launchpad-&gt;其他-&gt;终端<br>方法二：Finder-&gt;应用程序-&gt;实用工具-&gt;终端.app</p>
<h3 id="u547D_u4EE4_u64CD_u4F5C_u6B65_u9AA4"><a href="#u547D_u4EE4_u64CD_u4F5C_u6B65_u9AA4" class="headerlink" title="命令操作步骤"></a>命令操作步骤</h3><pre><code>1.    用命令进入到将要存放博客的目录下
$ cd Documents/
2.    生成存放博客的目录
$ mkdir hexo

3.    要输入root用户登录密码，获得root用户权限来安装hexo
$ sudo npm install hexo -g
4.    保存到本地
$ npm install hexo --save

5.    当前目录初始化，或者使用hexo init &lt;folder&gt;，指定目录初始化
$ hexo init
6.    生成博客
$ hexo generate

7.    安装hexo服务
$ sudo npm install hexo-server
8.    生成本地服务，要输入root登录密码
$ sudo npm install hexo-server —save

9.    启动服务,或使用hero s，按Ctrl+C停止运行
$ hexo server
</code></pre><p>10.打开链接 <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a> ,查看生成的博客。如果<br>显示cannot get/，继续安装下面几个文件。</p>
<pre><code>11.1    直接安装缺少的几个包
$ npm install
11.2    继续安装指定的几个包
$ sudo npm install hexo-renderer-ejs --save
$ sudo npm install hexo-renderer-stylus --save
$ sudo npm install hexo-renderer-marked --save
12.    重新生成博客并启动服务（hero server -generate）
$ hexo s -g
13.    重复第10步查看效果
</code></pre><h3 id="u672C_u6B21_u64CD_u4F5C_u6240_u6709_u547D_u4EE4_u96C6"><a href="#u672C_u6B21_u64CD_u4F5C_u6240_u6709_u547D_u4EE4_u96C6" class="headerlink" title="本次操作所有命令集"></a>本次操作所有命令集</h3><pre><code>511  cd Documents/
512  ls
513  mkdir hexo
514  cd hexo/
515  git://github.com/ry/node.git
516  npm instal hexo -g
517  sudo npm install hexo -g
518  hexo init
519  hexo generate
520  npm install hexo --save
521  hexo init
522  hexo generate
523  sudo npm install hexo-server
524  npm update hexo -g
525  npm help
526  npm v
527  npm -verson
528  npm verison
529  hexo help
530  hexo version
531  npm install hexo-server -save
532  npm install hexo-server --save
533  sudo npm install hexo-server --save
534  hexo-server
535  hexo server
536  sudo npm install hexo-renderer-ejs --save
537  npm install hexo-renderer-stylus --save
538  npm install hexo-renderer-marked --save
539  hexo g
540  hexo s
541  npm install hexo-renderer-ejs --save
542  npm install hexo-renderer-ejs --save
543  npm install hexo-renderer-marked --save
544  hexo s -g
545  sudo npm install hexo-renderer-ejs --save
546  sudo npm install hexo-renderer-stylus --save
547  sudo npm install hexo-renderer-marked --save
548  hexo generate
549  hexo server
550  npm install
551  hexo s -g
</code></pre><p>至此，Hexo博客环境已搭建完成，后面介绍的是关联Github博客。</p>
<h1 id="u53C2_u8003_u94FE_u63A5"><a href="#u53C2_u8003_u94FE_u63A5" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js官网</a><br><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js下载（安装包含npm工具</a><br><a href="https://hexo.io/docs/index.html" target="_blank" rel="external">Hexo官方文档</a><br><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">搭建环境博客 1</a><br><a href="http://segmentfault.com/a/1190000000370778" target="_blank" rel="external">搭建环境博客 2</a><br><a href="http://www.zhihu.com/question/35964327" target="_blank" rel="external">打开链接出现Cannot GET/的解决方法</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="e]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[技术博客编写总括]]></title>
    <link href="http://yoursite.com/2016/02/04/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E6%80%BB%E6%8B%AC/"/>
    <id>http://yoursite.com/2016/02/04/技术博客编写总括/</id>
    <published>2016-02-04T02:10:10.000Z</published>
    <updated>2016-02-26T03:02:23.000Z</updated>
    <content type="html"><![CDATA[<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="external">大彬的博客</a></p>
<h1 id="1-__u524D_u8A00"><a href="#1-__u524D_u8A00" class="headerlink" title="1.    前言"></a>1.    前言</h1><p>本文主要介绍技术博客从开始到完成编写第一篇技术博客—-也就是此博客，的原因、所要做的事和学的知识。</p>
<h1 id="2-__u5C0F_u7F16_u4E3A_u4F55_u8981_u5199_u6280_u672F_u535A_u5BA2"><a href="#2-__u5C0F_u7F16_u4E3A_u4F55_u8981_u5199_u6280_u672F_u535A_u5BA2" class="headerlink" title="2.    小编为何要写技术博客"></a>2.    小编为何要写技术博客</h1><h2 id="2-1__u548C_u4F17_u795E_u4E00_u6837_uFF0C_u8981_u505A_u4E2A_u6709_u903C_u683C_u7684_u7A0B_u5E8F_u733F"><a href="#2-1__u548C_u4F17_u795E_u4E00_u6837_uFF0C_u8981_u505A_u4E2A_u6709_u903C_u683C_u7684_u7A0B_u5E8F_u733F" class="headerlink" title="2.1    和众神一样，要做个有逼格的程序猿"></a>2.1    和众神一样，要做个有逼格的程序猿</h2><h2 id="2-2__u8BB0_u5F55_u5404_u4E2A_u5C0F_u6A21_u5757_u7684_u77E5_u8BC6_u3002"><a href="#2-2__u8BB0_u5F55_u5404_u4E2A_u5C0F_u6A21_u5757_u7684_u77E5_u8BC6_u3002" class="headerlink" title="2.2    记录各个小模块的知识。"></a>2.2    记录各个小模块的知识。</h2><pre><code>小编从入门开始就有记录和总结知识点的习惯，一直是写到有道云笔记里。小编的表哥是做C++开发的，
毕业前曾听他说把笔记写到有道云上，Windows,Mac和Phone都可以看。
</code></pre><h2 id="2-3__u589E_u5F3A_u81EA_u5DF1_u603B_u7ED3_u5F52_u7EB3_u7684_u80FD_u529B_u3002"><a href="#2-3__u589E_u5F3A_u81EA_u5DF1_u603B_u7ED3_u5F52_u7EB3_u7684_u80FD_u529B_u3002" class="headerlink" title="2.3    增强自己总结归纳的能力。"></a>2.3    增强自己总结归纳的能力。</h2><pre><code>学的知识多了，不总结，不分模块归纳起来，使用起来常会迷茫。如果从宏观的角度整理好知识点，那要
海量的知识点快速筛选到想要的知识能快很多。这点与学习书本知识通过目录总结类似。自己搭建过项目
框架的小伙伴在这个技能上应用很多了。像目录、架构和框架的作用就不多说了。个人觉得这种宏观结构
是相当重要的，所以先要有这生产它的意识，平时多思考和应用它。  
</code></pre><h2 id="2-4__u5E0C_u671B_u80FD_u628A_u4E00_u4E2A_u5C0F_u6A21_u5757_u7684_u6280_u672F_u5B66_u7CBE_u3002"><a href="#2-4__u5E0C_u671B_u80FD_u628A_u4E00_u4E2A_u5C0F_u6A21_u5757_u7684_u6280_u672F_u5B66_u7CBE_u3002" class="headerlink" title="2.4    希望能把一个小模块的技术学精。"></a>2.4    希望能把一个小模块的技术学精。</h2><pre><code>因为要写出一篇拿得出手的技术博客，你不仅要把相关技术学得全面，还要学得精细，并注意到各个细节。
比如：要写iOS开发里，UIButton的按钮类型枚举UIButtonType的技术博客。因为需求的原因，所以
基本上只用Custom类型的，一般人会的就只有一两个类型。如果要写UIButtonType的博客，那么自己
得把各个类型都要用过，写好各类型怎么用，有什么区别，能让别人搜索这个类型的时候，快速找到他们
想到的知识。所以，写博客也能让人把技术学得够精够透。
</code></pre><h2 id="2-5_u63D0_u9AD8_u81EA_u5DF1_u7684_u8868_u8FBE_u80FD_u529B_u3002"><a href="#2-5_u63D0_u9AD8_u81EA_u5DF1_u7684_u8868_u8FBE_u80FD_u529B_u3002" class="headerlink" title="2.5提高自己的表达能力。"></a>2.5提高自己的表达能力。</h2><pre><code>“自己会”和“让别人会”是两个不同的概念，图文表达要到位，即使不能照顾低水平的人，起码能让一般
水平的人看得懂，学得会。
</code></pre><h2 id="2-6_u589E_u52A0_u81EA_u8EAB_u6280_u672F_u7684_u6DF1_u5EA6_u548C_u5E7F_u5EA6_u3002"><a href="#2-6_u589E_u52A0_u81EA_u8EAB_u6280_u672F_u7684_u6DF1_u5EA6_u548C_u5E7F_u5EA6_u3002" class="headerlink" title="2.6增加自身技术的深度和广度。"></a>2.6增加自身技术的深度和广度。</h2><pre><code>因为写要博客，所以会经常去看别人的技术博客，遇到个接口主动搜一下，时间长了，能学到的知识就相
当多了。当然，深度这一块主要还得靠自己，搜尽一切资源，往一个方面专，你也能写AFNetworking
和SDWebImage这样的SDK。
</code></pre><h1 id="3-__u4ECE0_u5230_u53D1_u5E03_u6B64_u6587_u7AE0_u7684_u6D41_u7A0B"><a href="#3-__u4ECE0_u5230_u53D1_u5E03_u6B64_u6587_u7AE0_u7684_u6D41_u7A0B" class="headerlink" title="3.    从0到发布此文章的流程"></a>3.    从0到发布此文章的流程</h1><h2 id="3-1__u786E_u5B9A_u8981_u5199_u535A_u5BA2_u53D1_u5E03_u5230_u54EA_u91CC_u3002"><a href="#3-1__u786E_u5B9A_u8981_u5199_u535A_u5BA2_u53D1_u5E03_u5230_u54EA_u91CC_u3002" class="headerlink" title="3.1    确定要写博客发布到哪里。"></a>3.1    确定要写博客发布到哪里。</h2><p>小编目前发布到<a href="https://github.com/" target="_blank" rel="external">Github</a> ,并用<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>关联Github</p>
<h2 id="3-2__u642D_u5EFA_u76F8_u5173_u73AF_u5883_u3002"><a href="#3-2__u642D_u5EFA_u76F8_u5173_u73AF_u5883_u3002" class="headerlink" title="3.2    搭建相关环境。"></a>3.2    搭建相关环境。</h2><p>小编是在Mac系统下搭建Hexo的环境，流程如下：</p>
<ul>
<li>在安装了<a href="https://developer.apple.com/cn/xcode/downloads/" target="_blank" rel="external">Xcode</a>（连带安装git）的情况下，进行下面工具的安装，否则要另外安装git工具。</li>
<li>下载安装<a href="https://nodejs.org" target="_blank" rel="external">Node.js</a>，Node.js的安装连带npm（包管理工具Node Package<br>Magager）工具一起安装。</li>
<li>用npm安装Hexo。</li>
</ul>
<h2 id="3-3__u6CE8_u518CGithub_u8D26_u6237_uFF0C_u5E76_u751F_u6210_u81EA_u5DF1_u7684_u4ED3_u5E93_u3002"><a href="#3-3__u6CE8_u518CGithub_u8D26_u6237_uFF0C_u5E76_u751F_u6210_u81EA_u5DF1_u7684_u4ED3_u5E93_u3002" class="headerlink" title="3.3    注册Github账户，并生成自己的仓库。"></a>3.3    注册Github账户，并生成自己的仓库。</h2><h2 id="3-4__u4FEE_u6539_u811A_u672C_u6587_u4EF6_uFF0C_u5173_u8054Github_u4ED3_u5E93_u548CHexo_u7684_u535A_u5BA2_u3002"><a href="#3-4__u4FEE_u6539_u811A_u672C_u6587_u4EF6_uFF0C_u5173_u8054Github_u4ED3_u5E93_u548CHexo_u7684_u535A_u5BA2_u3002" class="headerlink" title="3.4    修改脚本文件，关联Github仓库和Hexo的博客。"></a>3.4    修改脚本文件，关联Github仓库和Hexo的博客。</h2><h2 id="3-5__u4E86_u89E3Markdown_u548C_u5B66_u4E60_u5176_u8BED_u6CD5_u3002"><a href="#3-5__u4E86_u89E3Markdown_u548C_u5B66_u4E60_u5176_u8BED_u6CD5_u3002" class="headerlink" title="3.5    了解Markdown和学习其语法。"></a>3.5    了解Markdown和学习其语法。</h2><p>有兴趣的话，大家还可以学下超文本标记语言HTML，后面编写起来能更容易。</p>
<h2 id="3-6__u5B89_u88C5_u535A_u5BA2_u7F16_u5199_u8F6F_u4EF6Markdown_Editor_u3002"><a href="#3-6__u5B89_u88C5_u535A_u5BA2_u7F16_u5199_u8F6F_u4EF6Markdown_Editor_u3002" class="headerlink" title="3.6    安装博客编写软件Markdown Editor。"></a>3.6    安装博客编写软件Markdown Editor。</h2><p>搜集相关软件，选出自己喜欢的类型来安装。有在线编辑和客户端编辑，小编安装了  客户端的<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>，<a href="http://soft.xiaoshujiang.com/" target="_blank" rel="external">小书匠</a>和<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd Markdown</a>。</p>
<h2 id="3-7__u7F16_u5199_u535A_u5BA2_u6587_u7AE0_u3002"><a href="#3-7__u7F16_u5199_u535A_u5BA2_u6587_u7AE0_u3002" class="headerlink" title="3.7    编写博客文章。"></a>3.7    编写博客文章。</h2><p>边查看Markdown语法边写博客，对照编辑模式和实际效果。</p>
<h2 id="3-8__u53D1_u5E03_u6587_u7AE0"><a href="#3-8__u53D1_u5E03_u6587_u7AE0" class="headerlink" title="3.8    发布文章"></a>3.8    发布文章</h2><p>生成Markdown格式的文件，替换Hexo new生成的文件，重新生成并发布。到博客查看效果，不合意<br>的话修改并重新生成和发布。</p>
<p>接下来将介绍的是 <a href="http://dabinge.github.io/2016/02/25/Mac%E4%B8%8BHexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">Mac下Hexo环境搭建</a>。</p>
<p>转自大彬的 <a href="http://dabinge.github.io/2016/02/04/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E6%80%BB%E6%8B%AC/" target="_blank" rel="external">技术博客编写总括</a></p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>编写本博客环境:    Mac OS 10.11.3,      Mou 0.8.7</strong></p>
<p>欢迎大家关注小编的博客 <a href="http://dabinge.github.io/" target="_blank" rel="e]]>
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
